import { MODULE_CODE } from '../../../../contrib/occtax/frontend/app/module.code.config';
// WARNING: this file was auto generated by GeoNature command line.
// See Jinja template with ".sample" file extension in same directory.

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { HomeContentComponent } from '../components/home-content/home-content.component';
import { PageNotFoundComponent } from '../components/page-not-found/page-not-found.component';
import { AuthGuard, ModuleGuardService } from '@geonature/routing/routes-guards.service';

import { SignUpGuard } from '@geonature/routing/routes-guards.service';
import { SignUpComponent } from '../components/sign-up/sign-up.component';

import { UserManagementGuard } from '@geonature/routing/routes-guards.service';
import { NewPasswordComponent } from '../components/new-password/new-password.component';

import { ConfigService } from '@geonature/utils/configModule/core';

import { LoginComponent } from '../components/login/login.component';
import { NavHomeComponent } from '../components/nav-home/nav-home.component';

import { MetadataModule } from '@geonature/metadataModule/metadata.module';
import { SyntheseModule } from '@geonature/syntheseModule/synthese.module';
import { AdminModule } from '@geonature/adminModule/admin.module';

import { externalModules } from './external_modules';

const getDynamicRoutes = (configService: ConfigService) => {
  const appConfig = configService.getSettings();

  const navChildrenModules = [];

  // ajout des modules avec frontend dans navChildren
  for (const moduleCode of appConfig.modules) {
    const moduleConfig = appConfig[moduleCode];
    navChildrenModules.push({
      path: moduleConfig.MODULE_PATH,
      loadChildren: () => externalModules[moduleCode],
      canActivate: [ModuleGuardService],
      data: {
        module_code: moduleCode
      }
    });
  }

  const navChildren = [
    {
      path: '',
      component: HomeContentComponent
    },
    {
      path: 'synthese',
      data: { module_code: 'synthese' },
      canActivate: [ModuleGuardService],
      loadChildren: () => SyntheseModule,
    },
    {
      path: 'metadata',
      data: { module_code: 'metadata' },
      canActivate: [ModuleGuardService],
      loadChildren: () => MetadataModule,
    },
    {
      path: 'admin',
      data: { module_code: 'admin' },
      canActivate: [ModuleGuardService],
      loadChildren: () => AdminModule,
    },
    ...navChildrenModules,
    {
      path: '**',
      component: PageNotFoundComponent
    }
  ];

  if (appConfig['ACCOUNT_MANAGEMENT']['ENABLE_USER_MANAGEMENT']) {
    navChildren.push({
      path: 'user',
      data: { module_code: 'user' },
      loadChildren: '@geonature/userModule/user.module#UserModule'
    });
  }

  const routes = [
    {
      path: 'login',
      component: LoginComponent,
    },
    {
      path: '',
      component: NavHomeComponent,
      canActivateChild: [AuthGuard],
      children: navChildren
    },
    {
      path: 'inscription',
      component: SignUpComponent,
      canActivate: [SignUpGuard]
    },
    {
      path: 'new-password',
      component: NewPasswordComponent,
      canActivate: [UserManagementGuard]
    }
  ];

  // suppression des routes si non USER MANAGEMENT

  if (!appConfig['ACCOUNT_MANAGEMENT']['ENABLE_SIGN_UP']) {
    const index = routes.findIndex(r => r.path === 'inscription');
    index != -1 && routes.splice(index);
  }

  if (!appConfig['ACCOUNT_MANAGEMENT']['ENABLE_USER_MANAGEMENT']) {
    const index = routes.findIndex(r => r.path === 'new-password');
    index != -1 && routes.splice(index);
  }

  return routes;
};

const routing = RouterModule.forRoot([], { useHash: true });
export { routing, getDynamicRoutes };
