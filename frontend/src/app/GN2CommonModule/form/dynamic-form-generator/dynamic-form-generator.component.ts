import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { DynamicFormService } from './dynamic-form.service';

/**
 * Ce composant permet de créer dynamiquement des formulaire à partir d'un modèle JSON
 */
@Component({
  selector: 'pnx-dynamic-form-generator',
  templateUrl: './dynamic-form-generator.component.html',
  styleUrls: ['./dynamic-form-generator.component.scss']
})
export class GenericFormGeneratorComponent implements OnInit {
  public formControlBuilded = false;
  public selectControl = new FormControl();

  public formsHidden = [];
  public formsDisplayed = [];

  public oldValue = {};
  public update;

  @Input() myFormGroup: FormGroup;
  @Output() myFormGroupChange = new EventEmitter<any>();

  @Input() formsDefinition: Array<any>;
  @Input() selectLabel: string;

  @Output() change = new EventEmitter<any>();

  /**
   * Est-ce que le formulaire doit être controlé par un champ select pour afficher/masquer les champs du formulaire
   * Par défault le formulaire est controlé par un champ select
   */
  @Input() autoGenerated = false;
  public formsSelected = [];

  constructor(private _dynformService: DynamicFormService) { }

  ngOnInit() {
    if (this.autoGenerated) {

      if (!this.myFormGroup) {
        this.myFormGroup = this._dynformService.initFormGroup();
      }

      // HACK: formeSelect = formDefinition en mode autoGenerated = true (on affiche tous les champs sans les filtrer au préalable)
      this.formsSelected = this.formsDefinition;
      // this.formsSelected = this.formsDefinition.filter(e => !e.hidden);
      // this.formsSelectedHidden = this.formsDefinition.filter(e => e.hidden);
      this.formsDefinition.forEach(formDef => {
        if (formDef.type_widget) {
          this._dynformService.addNewControl(formDef, this.myFormGroup);
        }
      });
    } else {
      this.selectControl.valueChanges
        .filter(value => value !== null)
        .subscribe(formDef => {
          this.addFormControl(formDef);
        });
      this.formsDefinition.sort((a, b) => {
        return a.attribut_label.localeCompare(b.attribut_label);
      });
    }
    this.setForms();
    this.formControlBuilded = true;
    this.myFormGroupChange.emit(this.myFormGroup);

    this.myFormGroup.valueChanges.subscribe((values) => {
      this.onFormsChange(values);
    });

    /** patch pourri pour verifier les containtes */
    // setTimeout(() => {
    // this.myFormGroup.patchValue({});
    // this.myFormGroup.updateValueAndValidity();
    // }, 300);
  }

  /**
   * on teste s'il y a un changement entre this.myFormGroup.value et valueSaved;
   */
  hasValueChanged(newValue) {
    return !this.deepEqual(newValue, this.oldValue);
  }

  deepEqual(obj1, obj2) {
    const $this = this;
    if (!(obj1 || obj2)) {
      return true;
    }

    if (!(obj1 && obj2)) {
      return false;
    }

    if (Array.isArray(obj1) && Array.isArray(obj2)) {
      if (obj1.length !== obj2.length) {
        return false;
      }
      return obj1.every((elem, index) => $this.deepEqual(elem, obj2[index]));
    }

    if (typeof obj1 === 'object' && typeof obj2 === 'object') {
      if (Object.keys(obj1).length !== Object.keys(obj2).length) {
        return false;
      }
      return Object.keys(obj1).every(key => $this.deepEqual(obj1[key], obj2[key]));
    }

    return obj1 === obj2;
  }

  setForms() {
    this.formsDisplayed = this.formsSelected
      .filter(formDef => !this._dynformService.getFormDefValue(formDef, 'hidden', this.myFormGroup.value)
      );
    this.formsHidden = this.formsSelected
      .filter(formDef => this._dynformService.getFormDefValue(formDef, 'hidden', this.myFormGroup.value)
      );
  }

  onFormsChange(newValue) {
    if (this.hasValueChanged(newValue)) {
      console.log('formChange');
      // mise à jour des formulaires affichés / cachés
      this.setForms();

      // pour dire aux formulaires qu'il y a un changement;
      this.update = true;
      setTimeout(() => {
        console.log('up form dyn');
        this.update = false;
        this.myFormGroup.updateValueAndValidity({ onlySelf: false, emitEvent: true });
      }, 500);
      this.change.emit(newValue);
      this.oldValue = { ...newValue };
    }
  }

  removeFormControl(i) {
    const formDef = this.formsSelected[i];
    this.formsSelected.splice(i, 1);
    this.formsDefinition.push(formDef);
    this.myFormGroup.removeControl(formDef.attribut_name);
    this.selectControl.setValue(null);
  }

  addFormControl(formDef) {
    this.formsSelected.push(formDef);
    this.formsDefinition = this.formsDefinition.filter(form => {
      return form.attribut_name !== formDef.attribut_name;
    });
    this._dynformService.addNewControl(formDef, this.myFormGroup);
  }
}
