(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"0yqa":function(t,n){t.exports=".form {\n  background-color: white;\n  padding-bottom: 5px;\n  margin-bottom: 5px; }\n"},"D+WP":function(t,n){t.exports='<div class="modal-header">\n  <h5 class="modal-title" id="modalLabel"> T\xe9l\xe9chargement </h5>\n  <button type="button" class="close" aria-label="Close" (click)="activeModal.close();">\n    <span aria-hidden="true">&times;</span>\n  </button>\n</div>\n<div class="modal-body">\n  <div *ngIf="tooManyObs">\n\n    <div class="alert alert-danger" role="alert">\n      <b> Attention ! </b> Votre requ\xeate comporte un nombre trop important de stations pour que celles-ci soient affich\xe9es sur la\n      carte.\n    </div>\n\n    <div class="alert alert-warning" role="alert">\n      Vous pouvez n\xe9amoins exporter les donn\xe9es, dans une limite de <b> {{\'OCCHAB.NB_MAX_EXPORT\' |config}} </b>\n      stations en cliquant sur les liens ci-dessous\n    </div>\n\n    <div class="alert alert-warning" role="alert">\n      En fermant cette fen\xeatre vous pouvez visualiser <b> seulement</b> les {{\'OCCHAB.NB_MAX_MAP_LIST\' |config}} derni\xe8res\n      stations correspondant \xe0 votre requ\xeate. <br>\n    </div>\n\n  </div>\n  <h5 class="underlined second-color"> T\xe9l\xe9charger les habitats des stations </h5>\n  <div style="margin-bottom:5px;">\n    <p> \n      <i class="fa fa-info-circle" aria-hidden="true"></i>\n      Votre recherche comporte {{storeService.idsStation.length}} station(s) d\'habitat \n    </p>\n    <p *ngIf="!tooManyObs">\n      <b>NB: </b> Le limite du nombre d\'habitat exportables est de {{\'OCCHAB.NB_MAX_EXPORT\' |config}}\n    </p>\n    <button style="margin-left: 5px;" *ngFor="let format of \'OCCHAB.EXPORT_FORMAT\' |config" class="buttonLoad" (click)="downloadStations(format)"\n      type="button" class="btn btn-success format-btn">\n        Format {{format}}\n    </button>\n  </div>\n\n\n  \x3c!-- <h5 class="underlined second-color"> T\xe9l\xe9charger les m\xe9tadonn\xe9es</h5>\n  <div>\n    <button [disabled]="_dataService.isDownloading" class="btn btn-success" (click)="downloadStatusOrMetadata(\'synthese/export_metadata\', \'synthese_metadata\')">\n       M\xe9tadonn\xe9es <i class="fa fa-list-alt" aria-hidden="true"></i>\n\n    </button>\n  </div> --\x3e\n\n\n  \x3c!-- <div *ngIf="_dataService.isDownloading" class="telechargement card" style="margin-top: 30px;">\n    <div class="card-body text-{{bstype}}" >\n      {{\'Downloading\' | translate }}\n      <img  src="assets/images/Spinner.gif" alt="Chargement..." height="40" width="40">\n    </div>\n  </div> --\x3e\n</div>\n'},Ezds:function(t,n){t.exports='\n\n<div class="row row-0">\n  <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 padding-sm">\n    \x3c!-- HABITAT ALREADY SAVED --\x3e\n    <div \n      id="overlay-hab"\n      class="card hard-shadow" \n      *ngIf="showTabHab;">\n        <div class="card-body small">\n          <div >\n            <table class="table">\n              <thead style="font-weight: bold">\n                <tr>\n                  <td> N\xb0</td>\n                  <td> Habitat</td>\n                  <td> Abondance</td>\n                  <td> #</td>\n                </tr>\n              </thead>\n              <tbody>\n                <ng-container *ngFor=\'let hab of occHabForm.stationForm.value.t_habitats; let last=last let i=index\'>\n                  <tr *ngIf="i != occHabForm.currentEditingHabForm">\n                        <td> {{occHabForm.stationForm.value.t_habitats.length - i}} </td>\n                        <td> {{hab?.nom_cite}} </td>\n                        <td> {{hab?.id_nomenclature_abundance?.label_default}}</td>\n                        <td> \n                          <span \n                            matTooltip="Editer cet habitat" \n                            type="button" \n                            class="btn btn-primary btn-sm"\n                            (click)="editHab(i)"  \n                          >\n                              <i class="fa fa-pencil-square-o" aria-hidden="true" ></i>\n                        </span> \n                          <span \n                            matTooltip="Supprimer cet habitat de la station" \n                            type="button" class="btn btn-danger btn-sm"\n                            (click)="occHabForm.deleteHab(i)" \n                          >\n                              <i class="fa fa-times" aria-hidden="true"></i>\n                        </span>\n                      </td>\n                  </tr>\n                </ng-container>\n              </tbody>  \n            </table>\n\n            \n          </div>\n    \n        </div>\n      </div>\n      \x3c!--END  HABITAT ALREADY SAVED --\x3e\n    <pnx-map [height]="mapHeight">\n        \x3c!-- <pnx-occhab-dataset-map-overlay\n          (getBoundingBox)="loadDatasetGeom($event)"\n        >\n        </pnx-occhab-dataset-map-overlay> --\x3e\n        <pnx-marker \n          [coordinates]="markerCoordinates" \n          zoomLevel="5"\n          [defaultEnable]="false"\n          (markerChanged)="occHabForm.patchGeoValue($event)">\n        </pnx-marker>\n        <pnx-leaflet-draw\n          [geojson]="currentGeoJsonFileLayer"\n          [options]="leafletDrawOptions"\n          zoomLevel="5"\n         (layerDrawed)="occHabForm.patchGeoValue($event)">\n        </pnx-leaflet-draw>\n        <pnx-leaflet-filelayer\n          [editMode]="true"\n          (onLoad)="infoMessageFileLayer()"\n          (onGeomChange)="occHabForm.patchGeoValue($event)"\n          [style]="{\'color\': \'green\'}"\n        >\n        </pnx-leaflet-filelayer>\n    </pnx-map>\n\n    \n  </div>\n  <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 padding-sm">\n    \x3c!-- Overlay to disable form until map is not fill --\x3e\n    <div *ngIf="disabledForm" id="overlay" [class.disabled-form]="disabledForm" (click)="formIsDisable()">\n    </div>\n    <div class="all-form">\n    <div class="card border-primary" id="station-card">\n      <h5 class="card-header bg-primary text-white">\n        <i class="fa fa-flag" aria-hidden="true"></i>\n        Station\n      </h5>\n\n      <div class="card-body">\n        <div class="row row-0">\n          <div class="col-6 padding-sm">\n            <div *ngIf="true; else observerIDBlock">\n              <pnx-observers-text \n                [parentFormControl]="occHabForm.stationForm.get(\'observers_txt\')">\n              </pnx-observers-text>\n            </div>\n            <ng-template #observerIDBlock>\n              <pnx-observers \n                [parentFormControl]="occHabForm.stationForm.get(\'observers\')" \n                idMenu="{{\'OCCHAB.OBSERVER_LIST_ID\' |config}}"\n                label="{{ \'Releve.Observers\' | translate }}" \n                [bindAllItem]="true"\n              >\n              </pnx-observers>\n            </ng-template>\n          </div>\n          <div class="col">\n            <div class="dataset-inactive" *ngIf="currentEditingStation?.properties?.dataset?.active == false; else elseblocDataset">\n                  <small> {{ \'MetaData.Datasets\' | translate }}:  </small>\n                  <small>\n                    <b> {{currentEditingStation?.properties?.dataset?.dataset_name}}</b>\n                  </small> \n                </div>\n            <ng-template #elseblocDataset>\n              <pnx-datasets \n                label="{{ \'MetaData.Datasets\' | translate }}" \n                [parentFormControl]="occHabForm.stationForm.get(\'id_dataset\')"\n                moduleCode="OCCHAB"\n              >\n              </pnx-datasets>\n            </ng-template>\n          </div>\n        </div>\n\n        <div class="form-group">\n            <div class="row row-0">\n              <div \n                class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm"\n                *ngIf="\'OCCHAB.formConfig.date_min\' |config"\n              >\n                <pnx-date \n                  [defaultToday]="true" \n                  label="{{ \'Releve.MinDate\' | translate }}" \n                  [parentFormControl]="occHabForm.stationForm.get(\'date_min\')"\n                >\n                </pnx-date>\n              </div>\n            <div \n              class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm"\n              *ngIf="\'OCCHAB.formConfig.date_max\' |config"\n            >\n              <pnx-date \n                [defaultToday]="true" \n                label="{{ \'Releve.MaxDate\' | translate }}" \n                [parentFormControl]="occHabForm.stationForm.get(\'date_max\')"\n              >\n              </pnx-date>\n            </div>\n          </div>\n          <small *ngIf="occHabForm.stationForm.errors?.invalidDate" class="error" style="color:red">\n            {{ \'Releve.DateMaxError\' | translate }}\n          </small>\n        </div>\n            \n\n        <div class="form-group">\n          <div class="row row-0">\n            <div \n              class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm"\n              *ngIf="\'OCCHAB.formConfig.altitude_min\' |config"\n            >\n                <small for=""> Altitude min</small>\n                <input \n                  type="number" \n                  class="form-control form-control-sm"\n                  [formControl]="occHabForm.stationForm.get(\'altitude_min\')"\n                >\n            </div>\n            <div \n              class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm"\n              *ngIf="\'OCCHAB.formConfig.altitude_max\' |config"\n              >\n              <small for=""> Altitude max</small>\n              <input \n                type="number" \n                class="form-control form-control-sm"\n                [formControl]="occHabForm.stationForm.get(\'altitude_max\')"\n              >\n            </div>\n            <button \n              *ngIf="!showDepth && ((\'OCCHAB.formConfig.depth_min\' |config) || (\'OCCHAB.formConfig.depth_max\' |config))"\n              (click)="toggleDepth()"\n              class="btn btn-sm btn-outline-shadow depth-button" \n              data-toggle="collapse"\n              data-target="#collapseDepth">\n              <i class="fa fa-plus" aria-expanded="false"></i>\n            </button>\n            <button \n              *ngIf="showDepth"\n              (click)="toggleDepth()"\n              class="btn btn-sm btn-outline-shadow depth-button" \n              data-toggle="collapse"\n              data-target="#collapseDepth">\n              <i class="fa fa-minus" aria-expanded="false"></i>\n            </button>\n          </div>\n          <small *ngIf="occHabForm.stationForm.errors?.invalidAlt" class="error" style="color:red">\n            {{ \'Releve.AltitudeError\' | translate }}\n          </small>\n        </div>\n\n        <div class="form-group collapse" id="collapseDepth">\n          <div class="row row-0">\n            <div \n              class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm"\n              *ngIf="\'OCCHAB.formConfig.depth_min\' |config"\n            >\n                <small for=""> Profondeur min</small>\n                <input \n                  type="number" \n                  class="form-control form-control-sm"\n                  [formControl]="occHabForm.stationForm.get(\'depth_min\')"\n                >\n            </div>\n            <div \n              class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm"\n              *ngIf="\'OCCHAB.formConfig.depth_max\' |config"\n            >\n              <small for=""> Profondeur max</small>\n              <input \n                type="number" \n                class="form-control form-control-sm"\n                [formControl]="occHabForm.stationForm.get(\'depth_max\')"\n              >\n            </div>\n          </div>\n        </div>\n\n        \n        <pnx-dumb-select\n          *ngIf="\'OCCHAB.formConfig.exposure\' |config"\n          label="Exposition" \n          [parentFormControl]="occHabForm.stationForm.get(\'id_nomenclature_exposure\')"         \n          [items]="storeService.nomenclatureItems.EXPOSITION"\n          comparedKey="id_nomenclature"\n          titleKey="definition_fr"\n          displayedKey="label_fr">\n       </pnx-dumb-select>\n\n       <div class="row row-0">\n         <div \n          class="col padding-sm"\n          *ngIf="\'OCCHAB.formConfig.area\' |config"          \n        >\n            <small> Surface (en m\xb2)</small>\n            <input \n              class="form-control form-control-sm"\n              [formControl]="occHabForm.stationForm.get(\'area\')"\n              type="number"\n            >\n         </div>\n\n         <div class="col padding-sm">\n            <pnx-dumb-select\n              *ngIf="\'OCCHAB.formConfig.area_surface_calculation\' |config"\n              label="M\xe9thode de calcul de la surface" \n              [parentFormControl]="occHabForm.stationForm.get(\'id_nomenclature_area_surface_calculation\')"         \n              [items]="storeService.nomenclatureItems.METHOD_CALCUL_SURFACE"\n              comparedKey="id_nomenclature"\n              titleKey="definition_fr"\n              displayedKey="label_fr">\n           </pnx-dumb-select>\n         </div>\n       </div>\n       <div class="row row-0">\n          <div class="form-group col-6 padding-sm">\n            <pnx-dumb-select\n              *ngIf="\'OCCHAB.formConfig.geographic_object\' |config"\n              label="Nature objet g\xe9ographique" \n              [parentFormControl]="occHabForm.stationForm.get(\'id_nomenclature_geographic_object\')"         \n              [items]="storeService.nomenclatureItems.NAT_OBJ_GEO"\n              comparedKey="id_nomenclature"\n              titleKey="definition_fr"\n              displayedKey="label_fr">\n            </pnx-dumb-select>\n          </div>\n       </div>\n\n       <div \n        class="row row-0"\n        *ngIf="\'OCCHAB.formConfig.comment\' |config"\n      >\n        <div class="form-group col-6 padding-sm">\n            <textarea \n              class="form-control form-control-sm"\n              type="textarea"\n              placeholder="Commentaire"\n              [formControl]="occHabForm.stationForm.get(\'comment\')"\n            ></textarea>\n        </div>\n\n       </div>\n\n\n    </div>\n  </div>\n\n    \x3c!-- END STATION FORM --\x3e\n\n    <button \n      id="validateButton"\n      type="button" \n      class="btn btn-success hard-shadow btn-action"\n      (click)="postStation()"\n      [disabled]="occHabForm.stationForm.invalid || showHabForm || !atLeastOneHab"\n    >\n      VALIDER LA STATION\n    </button>\n\n    \n    <div class="card border-primary">\n      <div class="habitat-form">\n        <h5 class="card-header text-white" id="header-form-hab">\n          <i class="fa fa-leaf" aria-hidden="true"></i>\n          Habitat\n          <button \n          *ngIf="!showHabForm"\n          type="button" \n          id="add-hab-btn"\n          class="btn btn-sm float-right "\n          (click)=addNewHab();\n          > \n          <i style="color: rgb(0, 233, 0);" class="fa fa-plus" aria-hidden="true"></i>\n          Ajouter un habitat \xe0 la station\n        </button>\n        <button \n          *ngIf="showHabForm"\n          type="button" \n          class="btn btn-sm btn-danger float-right add-hab-btn" \n          (click)="cancelHab()">\n          <i class="fa fa-minus" aria-hidden="true"></i>\n          Annuler l\'\xe9dition de l\'habitat\n        </button>\n        </h5>\n        <div \n          *ngIf="showHabForm"\n          class="card-body body-hab-form"\n        >\n          <div class="form-row collapse" id="collaspeTypo">\n            <div class="col-6 padding-sm">\n                <small> S\xe9lectionner une typologie d\'habitat</small>\n                <select\n                 [formControl]="occHabForm.typoHabControl"\n                 class="form-control form-control-sm"> \n                 <option [ngValue]="null"> Toutes </option>\n                  <option \n                    *ngFor="let typo of storeService.typoHabitat" \n                    [ngValue]="typo.cd_typo"> \n                      {{typo.lb_nom_typo}}\n                   </option>\n                </select>\n            </div>\n          </div>\n  \n          <div class="form-row">\n            <div class="col-6 inline">\n                <pnx-autocomplete \n                  [apiEndPoint]="URL_AUTOCOMPLETE"\n                  [searchAsParameter]="false"  \n                  [parentFormControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'habref\')"\n                  queryParamSearch="search_name"\n                  [othersGetParams]="occHabForm.selectedTypo"\n                  [formatter]="formatter"\n                  keyValue="search_name"\n                  label="Habitat"\n                  placeholder="Tapez les premi\xe8res lettres..."\n                  (onChange)="occHabForm.patchNomCite($event)"\n              >\n              </pnx-autocomplete>\n              <div class="input-group-append" id="addon">\n                <button class="btn btn-sm btn-outline-shadow" data-toggle="collapse" data-target="#collaspeTypo" aria-expanded="false"\n                  aria-controls="collapseExample" matTooltip="Filtrer les habitat propos\xe9s \xe0 l\'autocompletion  par typologie">\n                  <i class="fa fa-filter" aria-hidden="true"></i>\n                </button>\n              </div>\n            </div>\n            <div class="col-6 padding-sm">\n              <pnx-dumb-select\n                *ngIf="\'OCCHAB.formConfig.community_interest\' |config"\n                label="Habitat d\'interet communautaire" \n                [parentFormControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'id_nomenclature_community_interest\')"         \n                [items]="storeService.nomenclatureItems.HAB_INTERET_COM"\n                comparedKey="id_nomenclature"\n                titleKey="definition_fr"\n                displayedKey="label_fr"\n                [displayNullValue]="true"\n              >\n              </pnx-dumb-select>\n            </div>\n\n  \n          </div>\n  \n          <div class="form-row">\n            <div \n              class="col" \n              *ngIf="\'OCCHAB.formConfig.determiner\' |config"\n            >\n                <small> D\xe9terminateur</small>\n                <input type="text" \n                  name="determinter"\n                  class="form-control form-control-sm"\n                  [formControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'determiner\')"         \n                >\n            </div>\n            <div \n              class="col"\n              *ngIf="\'OCCHAB.formConfig.determination_type\' |config"\n            >\n              <pnx-dumb-select\n                label="Type de d\xe9termination" \n                [parentFormControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'id_nomenclature_determination_type\')"         \n                [items]="storeService.nomenclatureItems.DETERMINATION_TYP_HAB"\n                comparedKey="id_nomenclature"\n                titleKey="definition_fr"\n                displayedKey="label_fr">\n              </pnx-dumb-select>\n            </div>\n          </div>\n  \n  \n          <pnx-dumb-select\n            *ngIf="\'OCCHAB.formConfig.collection_technique\'|config"\n            label="Technique de collecte" \n            [parentFormControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'id_nomenclature_collection_technique\')"         \n            [items]="storeService.nomenclatureItems.TECHNIQUE_COLLECT_HAB"\n            comparedKey="id_nomenclature"\n            titleKey="definition_fr"\n            displayedKey="label_fr">\n          </pnx-dumb-select>\n\n          \n          <div class="form-group">\n            <input \n              *ngIf="\'OCCHAB.formConfig.technical_precision\' |config"\n              type="text"\n              class="form-control form-control-sm"\n              placeholder="Pr\xe9cision sur la technique de collecte"\n              [ngClass]="{\'ng-invalid\' : occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].errors?.invalidTechnicalValues}"\n              [formControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'technical_precision\')"           \n            >\n          </div>\n\n          <small \n            *ngIf="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].errors?.invalidTechnicalValues"\n            class="error"\n            style="color:red"> \n            Veuillez fournir des pr\xe9cisions concernant la technique de collecte\n          </small>\n\n          <div \n            class="form-group"\n            *ngIf="\'OCCHAB.formConfig.recovery_percentage\' |config"\n          >\n            <small> Pourcentage de recouvrement</small>\n            <input type="number" \n              name="recovery"\n              class="form-control form-control-sm"\n              [formControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'recovery_percentage\')"         \n            >\n          </div>\n  \n          <pnx-dumb-select\n            *ngIf="\'OCCHAB.formConfig.abundance\' |config"\n            label="Abondance" \n            [parentFormControl]="occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].get(\'id_nomenclature_abundance\')"         \n            [items]="storeService.nomenclatureItems.ABONDANCE_HAB"\n            comparedKey="id_nomenclature"\n            titleKey="definition_fr"\n            displayedKey="label_fr"\n            [displayNullValue]="true"\n          >\n          </pnx-dumb-select>\n  \n  \n          <br>\n\n          <button \n          type="button" \n          class="btn btn-primary btn-sm"\n          (click)="validateHabitat();"\n          [disabled]="\n          occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm]\n          && occHabForm.stationForm.get(\'t_habitats\').controls[occHabForm.currentEditingHabForm].invalid"\n          > \n          <i style="color: rgb(0, 233, 0);" class="fa fa-plus" aria-hidden="true"></i>\n          Valider cet habitat\n        </button>\n\n\n        </div>\n\n      </div>\n\n    </div>\n\n  </div>\n    \n  \x3c!-- {{occHabForm.stationForm.value.t_habitats[0] |json }} --\x3e\n      \x3c!-- {{occHabForm.stationForm.value |json }} --\x3e\n\n  </div>\n</div>\n'},H3Vj:function(t,n){t.exports='<div id="cover-spin" *ngIf="dataLoading"> \n</div>\n<div class="float-btns">\n    <button\n      id="add-btn"\n      class="btn  btn-success hard-shadow btn-action" \n      [routerLink]="[\'form\']"\n      matTooltip="Ajouter une nouvelle station d\'habitat"\n    > \n        AJOUTER\n        <i class="fa fa-plus" aria-hidden="true"></i>    </button>\n    <button \n      class="btn  btn-primary hard-shadow btn-action"\n      data-toggle="collapse"\n      data-target="#collapseFilter"\n      matTooltip="Rechercher des habitats "\n    >\n      FILTRER\n      <i class="fa fa-sliders" aria-hidden="true"></i>\n    \n    </button>\n    \n</div>\n\n<div class="row row-sm map-list-container">\n  <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 padding-sm">\n    <pnx-map-list height=\'88vh\' idName="id_station"></pnx-map-list>\n  </div>\n\n  <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 padding-sm">\n    <div class="collapse" id="collapseFilter">\n      <pnx-occhab-map-list-filter (onSearch)="searchData($event)"> </pnx-occhab-map-list-filter>\n    </div>\n    <button\n      id="download-btn"\n      class="btn btn-primary box-shadow btn-action"\n      (click)="openModal()"\n      >\n      TELECHARGER\n      <i class="fa fa-download" aria-hidden="true"></i>\n    </button>\n\n    <ngx-datatable \n      (window:resize)="onResize($event)"\n      #dataTable \n      class="material striped margin-top-xs table-size expandable"\n      [rows]="mapListService.tableData"\n      [rowHeight]="40"\n      [selected]="mapListService.selectedRow"\n      [selectionType]="\'single\'" \n      [rowClass]="mapListService.getRowClass"\n      [count]="mapListService.tableData.length"\n      [limit]="rowNumber"\n      [footerHeight]="50"\n      [headerHeight]="50"\n      (select)="mapListService.onRowSelect($event)"\n    >\n      <ngx-datatable-row-detail \n        #myDetailRow \n        rowHeight="100" \n      >\n      <ng-template ngx-datatable-row-detail-template\n        let-row="row" \n        let-expanded="expanded" \n      >\n        <div><strong>ID station : </strong>{{ row.id_station }}</div>\n        <ng-container *ngIf="row.comment !== null && row?.comment.trim() !== \'\'">\n          <div><strong>Commentaire : </strong>{{ row.comment }}</div>\n        </ng-container>\n        <div><strong>Altitude : </strong>{{ row.altitude_min == row.altitude_max ? row.altitude_min : row.altitude_min+\' - \'+row.altitude_max }}</div>\n        <div><strong>Observ\xe9 par: </strong></div>\n        <div style="margin-left: 20px;">\n            <div *ngFor="let obs of displayObservateursTooltip(row)">\n              {{ obs }}\n            </div>\n          </div>\n        <div><strong>Habitats(s): </strong></div>\n        <div style="margin-left: 20px;">\n          <div *ngFor="let hab of displayHabTooltip(row)">\n            {{ hab }}\n          </div>\n        </div>\n      \n      </ng-template>\n    </ngx-datatable-row-detail>\n    <ngx-datatable-column\n      [width]="10"\n      [resizeable]="false"\n      [sortable]="false"\n      [draggable]="false"\n      [canAutoResize]="false"\n    >\n\n    <ng-template ngx-datatable-cell-template\n      let-row="row" \n      let-expanded="expanded"\n    >\n      <a href="javascript:void(0)"\n        matTooltip="Ouvrir/fermer le d\xe9tail"\n        [class.datatable-icon-right]="!expanded"\n        [class.datatable-icon-down]="expanded"\n        (click)="toggleExpandRow(row)">\n      </a>\n    </ng-template>\n  \n    </ngx-datatable-column>\n    <ngx-datatable-column maxWidth="10">\n        <ng-template let-row="row" ngx-datatable-cell-template>\n          <button \n            [matTooltip]="row.id_station" \n            [routerLink]="[\'info\', row.id_station]"\n            class="btn btn-outline-shadow btn-no-padding btn-ghost"\n          >\n            <i class="fa fa-info-circle" aria-hidden="true"></i>\n            {{row.id_station}}\n          </button>\n        </ng-template>\n      </ngx-datatable-column>\n\n      <ngx-datatable-column maxWidth="10">\n\n          <ng-template let-row="row" ngx-datatable-cell-template>\n            <button \n              class="btn btn-outline-shadow btn-no-padding btn-ghost"\n              [routerLink]="[\'form\', row.id_station]">\n              <i class="fa fa-pencil-square-o" aria-hidden="true"></i>\n            </button>\n          </ng-template>\n        </ngx-datatable-column>\n      \n\n      <ngx-datatable-column maxWidth="10">\n        <ng-template let-row="row" ngx-datatable-cell-template>\n          <button class="btn btn-outline-shadow btn-no-padding btn-ghost"\n            (click)="openDeleteModal(row, deleteModal)"\n          >\n            <i class="fa fa-trash-o" aria-hidden="true"></i>\n          </button>\n        </ng-template>\n      </ngx-datatable-column>\n\n\n\n      <ng-container *ngFor="let col of displayedColumns" >\n          <ngx-datatable-column  \n            [name]="col.name" \n            [prop]="col.prop"\n            [ngSwitch]="col.prop"\n            [width]="col.width"\n          >\n          \x3c!-- HABITAT --\x3e\n          <ng-template \n            *ngSwitchCase="\'habitats\'" \n            ngx-datatable-cell-template\n            let-row="row" \n          >\n            <span \n              [matTooltip]="displayHabTooltip(row).join(\'\\n\')" \n              matTooltipPosition="left"\n            >\n              <span>\n                  <span class=\'badge badge-dark\'> {{row.t_habitats?.length}} </span>\n                    {{displayHabTooltip(row)}}\n                </span>\n            </span> \n        </ng-template>\n        \x3c!-- DATE --\x3e\n        <ng-template \n          *ngSwitchCase="\'date_min\'" \n          ngx-datatable-cell-template\n          let-row="row" \n          maxWidth="50" \n        >\n          <span matTooltip="{{ row.date_min|date:\'dd-MM-yyyy\' }}">\n            {{ row.date_min|date:\'dd-MM-yyyy\' }}\n          </span>\n        </ng-template>\n        \x3c!-- JDD --\x3e\n        <ng-template \n          *ngSwitchCase="\'dataset_name\'" \n          ngx-datatable-cell-template\n          let-row="row" \n        >\n          <span matTooltip="{{ row.dataset.dataset_name }}">\n              {{row.dataset.dataset_name}}\n          </span>\n        </ng-template>\n        \x3c!-- OTHER COLS --\x3e\n        <ng-template *ngSwitchDefault let-row="row" ngx-datatable-cell-template>\n          <span \n            [matTooltip]="row[col.prop]"\n              matTooltipPosition="left">\n            {{row[col.prop]}}\n          </span>\n        </ng-template>\n        </ngx-datatable-column>\n      </ng-container>\n    </ngx-datatable>\n  </div>\n\n</div>\n\n<ng-template #deleteModal let-c="close " let-d="dismiss">\n\n  <pnx-occhab-delete \n    [c]="c"\n    [idStation]="deleteOne.id_station"\n    [nbHabitats]="deleteOne.t_habitats.length"\n    (onDelete)="mapListService.deleteObsFront(deleteOne.id_station)">\n  </pnx-occhab-delete>\n\n</ng-template>'},T09V:function(t,n){t.exports=":host /deep/ .datatable-body-row.active .datatable-row-group {\n  background-color: #75e376 !important; }\n\n:host /deep/ .datatable-row-detail {\n  height: auto !important;\n  font-size: 0.8em; }\n\n:host /deep/ .ngx-datatable {\n  border-color: #007bff !important;\n  border: solid 1px; }\n\n:host-context(mat-toolbar) {\n  background-color: black; }\n\n.float-btns {\n  position: absolute;\n  z-index: 10000;\n  margin-top: 5px;\n  margin-left: 20px; }\n\n#add-btn {\n  margin-right: 10px; }\n\n.map-list-container {\n  margin-top: -5px; }\n\n#download-btn {\n  z-index: 1000;\n  bottom: 1%;\n  right: 1%;\n  position: absolute; }\n\n:host /deep/ ngx-datatable {\n  height: 100%; }\n"},"WEm+":function(t,n){t.exports='\n<div class="modal-header">\n  <h4 class="modal-title pull-left">Suppression</h4>\n  <button type="button" class="close pull-right" aria-label="Close" (click)="c()">\n    <span aria-hidden="true">&times;</span>\n  </button>\n</div>\n<div class="modal-body">\n  <p>\n    Attention vous vous appr\xeatez \xe0 supprimer une station qui comporte\n    {{nbHabitats}} habitat(s)\n  </p>\n  <button type="button" (click)="c()" class="btn btn-secondary">Annuler</button>\n\n  <button type="button" \n    (click)="deleteStation(modalDelete); c()"\n    class="btn btn-danger">Supprimer</button>\n</div>\n\n\n'},i09h:function(t,n){t.exports=".content {\n  border-top: 1px solid #ebebeb !important;\n  padding: 5px 0px !important; }\n\n#card-station {\n  padding-bottom: 0px; }\n\n.table {\n  margin-bottom: 3px !important; }\n\n.right-side {\n  height: 87vh;\n  overflow-y: auto; }\n"},jA9L:function(t,n,e){"use strict";e.r(n);var a=e("mrSG"),o=e("CcnG"),i=e("4GxJ"),r=e("ZYCi"),s=e("hWDh"),l=e("Ip0R"),c=e("WSZi"),d=e("VnD/"),m=e("gIcY"),p=e("xKeI"),u=e("yc7q"),b=e("26FU"),h=function(){function t(t,n){var e=this;this._gnDataService=t,this._configService=n,this.nomenclatureItems={},this.firstMessageMapList=!0,this._defaultNomenclature$=new b.a(null),this.defaultNomenclature$=this._defaultNomenclature$.asObservable(),this._gnDataService.getNomenclatures(["METHOD_CALCUL_SURFACE","DETERMINATION_TYP_HAB","TECHNIQUE_COLLECT_HAB","HAB_INTERET_COM","EXPOSITION","NAT_OBJ_GEO","HAB_INTERET_COM","ABONDANCE_HAB"]).subscribe(function(t){t.forEach(function(t){e.nomenclatureItems[t.mnemonique]=t.values})}),this._gnDataService.getTypologyHabitat(this._configService.getSettings("OCCHAB.ID_LIST_HABITAT")).subscribe(function(t){e.typoHabitat=t}),this._gnDataService.getDefaultNomenclatureValue("occhab").subscribe(function(t){e._defaultNomenclature$.next(t)})}return Object.defineProperty(t.prototype,"defaultNomenclature",{get:function(){return this._defaultNomenclature$.getValue()},enumerable:!0,configurable:!0}),t=a.c([Object(o.Injectable)(),a.f("design:paramtypes",[u.a,s.c])],t)}(),g=function(){function t(t,n,e,a,o,i){var r=this;this._fb=t,this._dateParser=n,this._gn_dataSerice=e,this._storeService=a,this._formService=o,this._configService=i,this.typoHabControl=new m.FormControl,this.currentEditingHabForm=null,this.typoHabControl.valueChanges.subscribe(function(t){r.selectedTypo={cd_typo:t}})}return t.prototype.initStationForm=function(){var t=this._fb.group({id_station:null,unique_id_sinp_station:null,id_dataset:[null,m.Validators.required],date_min:[null,m.Validators.required],date_max:[null,m.Validators.required],observers:[null,this._configService.getSettings("OCCHAB.OBSERVER_AS_TXT")?null:m.Validators.required],observers_txt:[null,this._configService.getSettings("OCCHAB.OBSERVER_AS_TXT")?m.Validators.required:null],is_habitat_complex:!1,id_nomenclature_exposure:null,altitude_min:null,altitude_max:null,depth_min:null,depth_max:null,area:null,id_nomenclature_area_surface_calculation:null,id_nomenclature_geographic_object:[null,m.Validators.required],geom_4326:[null,m.Validators.required],comment:null,t_habitats:this._fb.array([])});return t.setValidators([this._formService.dateValidator(t.get("date_min"),t.get("date_max")),this._formService.altitudeValidator(t.get("altitude_min"),t.get("altitude_max"))]),this._formService.autoCompleteDate(t),t},t.prototype.patchDefaultNomenclaureStation=function(t){this.stationForm.patchValue({id_nomenclature_area_surface_calculation:t.METHOD_CALCUL_SURFACE,id_nomenclature_geographic_object:t.NAT_OBJ_GEO})},t.prototype.initHabForm=function(t){var n=this._fb.group({id_station:null,id_habitat:null,unique_id_sinp_hab:null,nom_cite:null,habref:[m.Validators.required,this.cdHabValidator],id_nomenclature_determination_type:t?t.DETERMINATION_TYP_HAB:null,determiner:null,id_nomenclature_community_interest:null,id_nomenclature_collection_technique:[t?t.TECHNIQUE_COLLECT_HAB:null,m.Validators.required],recovery_percentage:null,id_nomenclature_abundance:null,technical_precision:null});return n.setValidators([this.technicalValidator]),n},t.prototype.technicalValidator=function(t){var n=t.get("id_nomenclature_collection_technique").value,e=t.get("technical_precision").value;return n&&"10"==n.cd_nomenclature&&!e?{invalidTechnicalValues:!0}:null},t.prototype.cdHabValidator=function(t){var n=t.value;return n?n.cd_hab||n.search_name?null:{invalidTaxon:!0}:null},t.prototype.resetAllForm=function(){this.stationForm.reset()},t.prototype.addNewHab=function(){this.stationForm.value.t_habitats.length;this.stationForm.controls.t_habitats.insert(0,this.initHabForm(this._storeService.defaultNomenclature)),this.currentEditingHabForm=0},t.prototype.editHab=function(t){this.currentEditingHabForm=t},t.prototype.cancelHab=function(){this.deleteHab(this.currentEditingHabForm),this.currentEditingHabForm=null},t.prototype.deleteHab=function(t){this.stationForm.controls.t_habitats.removeAt(t)},t.prototype.patchGeoValue=function(t){var n=this;this.stationForm.patchValue({geom_4326:t.geometry}),this._gn_dataSerice.getAreaSize(t).subscribe(function(t){n.stationForm.patchValue({area:Math.round(t)})},function(){n.stationForm.patchValue({area:null})}),this._gn_dataSerice.getGeoInfo(t).subscribe(function(t){n.stationForm.patchValue({altitude_min:t.altitude.altitude_min,altitude_max:t.altitude.altitude_max})},function(){n.stationForm.patchValue({altitude_min:null,altitude_max:null})})},t.prototype.patchNomCite=function(t){this.stationForm.controls.t_habitats.controls[this.currentEditingHabForm].patchValue({nom_cite:t.item.search_name})},t.prototype.formatNomenclature=function(t){Object.keys(t).forEach(function(n){n.startsWith("id_nomenclature")&&t[n]&&(t[n]=t[n].id_nomenclature)})},t.prototype.getOrNull=function(t,n){return t[n]?t[n]:null},t.prototype.formatStationAndHabtoPatch=function(t){var n=this,e=t.t_one_habitats.map(function(t){return t.habref.search_name=t.nom_cite,a.a({},t,{id_nomenclature_determination_type:n.getOrNull(t,"determination_method"),id_nomenclature_collection_technique:n.getOrNull(t,"collection_technique"),id_nomenclature_abundance:n.getOrNull(t,"abundance")})});return t.t_habitats=e,a.a({},t,{date_min:this._dateParser.parse(t.date_min),date_max:this._dateParser.parse(t.date_max),id_nomenclature_geographic_object:this.getOrNull(t,"geographic_object"),id_nomenclature_area_surface_calculation:this.getOrNull(t,"area_surface_calculation"),id_nomenclature_exposure:this.getOrNull(t,"exposure")})},t.prototype.patchStationForm=function(t){for(var n=0;n<t.properties.t_one_habitats.length;n++)this.stationForm.controls.t_habitats.push(this.initHabForm(this._storeService.defaultNomenclature));var e=this.formatStationAndHabtoPatch(t.properties);this.stationForm.patchValue(e),this.stationForm.patchValue({geom_4326:t.geometry}),this.currentEditingHabForm=null},t.prototype.formatStationBeforePost=function(){var t=this,n=Object.assign({},this.stationForm.value);n.t_habitats.forEach(function(t){t.habref&&(t.cd_hab=t.habref.cd_hab,delete t.habref)}),n.date_min=this._dateParser.format(n.date_min),n.date_max=this._dateParser.format(n.date_max),this.formatNomenclature(n),n.t_habitats.forEach(function(n){t.formatNomenclature(n)});var e=n.geom_4326;return delete n.geom_4326,{type:"Feature",geometry:a.a({},e),properties:a.a({},n)}},t=a.c([Object(o.Injectable)(),a.f("design:paramtypes",[m.FormBuilder,i.b,u.a,h,p.a,s.c])],t)}(),f=e("5weA"),v=e("t/Na"),_=function(){function t(t,n,e){this._http=t,this._gnDataService=n,this._configService=e,this.ASBSOLUTE_MODULE_URL=this._configService.getSettings("API_ENDPOINT")+"/"+this._configService.getSettings("OCCHAB.MODULE_URL")}return t.prototype.postStation=function(t){return this._http.post(this.ASBSOLUTE_MODULE_URL+"/station",t)},t.prototype.getStations=function(t){var n=new v.HttpParams;for(var e in t)t[e]&&(n=n.set(e,t[e]));return this._http.get(this.ASBSOLUTE_MODULE_URL+"/stations",{params:n})},t.prototype.getOneStation=function(t){return this._http.get(this.ASBSOLUTE_MODULE_URL+"/station/"+t)},t.prototype.deleteOneStation=function(t){return this._http.delete(this.ASBSOLUTE_MODULE_URL+"/station/"+t)},t.prototype.exportStations=function(t,n){var e=this._http.post(this.ASBSOLUTE_MODULE_URL+"/export_stations/"+t,{idsStation:n},{observe:"events",responseType:"blob",reportProgress:!0});this._gnDataService.subscribeAndDownload(e,"export_hab",t)},t=a.c([Object(o.Injectable)(),a.f("design:paramtypes",[v.HttpClient,u.a,s.c])],t)}(),y=e("4NfF"),x=function(){function t(t,n,e,a,o,i,r){this.occHabForm=t,this._occHabDataService=n,this.storeService=e,this._route=a,this._router=o,this._commonService=i,this._configService=r,this.leafletDrawOptions=y.a,this.editionMode=!1,this.MAP_SMALL_HEIGHT="50vh !important;",this.MAP_FULL_HEIGHT="87vh",this.mapHeight=this.MAP_FULL_HEIGHT,this.showHabForm=!1,this.showTabHab=!1,this.showDepth=!1,this.disabledForm=!0,this.firstFileLayerMessage=!0,this.atLeastOneHab=!1}return t.prototype.ngOnInit=function(){var t=this;this.URL_AUTOCOMPLETE=this._configService.getSettings("API_ENDPOINT")+"/habref/habitats/autocomplete/list/"+this._configService.getSettings("OCCHAB.ID_LIST_HABITAT"),this.leafletDrawOptions,y.a.draw.polyline=!1,y.a.draw.circle=!1,y.a.draw.rectangle=!1,this.occHabForm.stationForm=this.occHabForm.initStationForm(),this.occHabForm.stationForm.controls.geom_4326.valueChanges.subscribe(function(n){t.disabledForm=!1}),this.storeService.defaultNomenclature$.pipe(Object(d.a)(function(t){return null!==t})).subscribe(function(n){t.occHabForm.patchDefaultNomenclaureStation(n)})},t.prototype.ngAfterViewInit=function(){var t=this;this._sub=this._route.params.subscribe(function(n){n.id_station&&(t.editionMode=!0,t.atLeastOneHab=!0,t.showHabForm=!1,t.showTabHab=!0,t._occHabDataService.getOneStation(n.id_station).subscribe(function(n){t.currentEditingStation=n,"Point"==n.geometry.type?t.markerCoordinates=n.geometry.coordinates:t.currentGeoJsonFileLayer=n.geometry,t.occHabForm.patchStationForm(n)}))})},t.prototype.formIsDisable=function(){this.disabledForm&&this._commonService.translateToaster("warning","Releve.FillGeometryFirst")},t.prototype.infoMessageFileLayer=function(){this.firstFileLayerMessage&&this._commonService.translateToaster("info","Map.FileLayerInfoMessage"),this.firstFileLayerMessage=!1},t.prototype.addNewHab=function(){this.occHabForm.addNewHab(),this.showHabForm=!0},t.prototype.validateHabitat=function(){this.showHabForm=!1,this.showTabHab=!0,this.occHabForm.currentEditingHabForm=null,this.atLeastOneHab=!0},t.prototype.editHab=function(t){this.occHabForm.editHab(t),this.showHabForm=!0},t.prototype.cancelHab=function(){this.showHabForm=!1,this.occHabForm.cancelHab()},t.prototype.toggleDepth=function(){this.showDepth=!this.showDepth},t.prototype.postStation=function(){var t=this,n=this.occHabForm.formatStationBeforePost();this._occHabDataService.postStation(n).subscribe(function(n){t.occHabForm.resetAllForm(),t._router.navigate(["occhab"])},function(n){403===n.status?t._commonService.translateToaster("error","NotAllowed"):t._commonService.translateToaster("error","ErrorMessage")})},t.prototype.formatter=function(t){return t.search_name},t.prototype.loadDatasetGeom=function(t){console.log(t)},t.prototype.ngOnDestroy=function(){this._sub.unsubscribe()},t=a.c([Object(o.Component)({selector:"pnx-occhab-form",template:e("Ezds"),providers:[g],styles:[e("tt/I"),e("nxyw")]}),a.f("design:paramtypes",[g,_,h,r.ActivatedRoute,r.Router,f.a,s.c])],t)}(),H=e("bkLN"),F=e("y9jh"),C=function(){function t(t,n,e){this.activeModal=t,this._occHabDataService=n,this.storeService=e,this.tooManyObs=!1}return t.prototype.ngOnInit=function(){},t.prototype.downloadStations=function(t){this._occHabDataService.exportStations(t,this.storeService.idsStation)},a.c([Object(o.Input)(),a.f("design:type",Object)],t.prototype,"tooManyObs",void 0),t=a.c([Object(o.Component)({selector:"pnx-occhab-map-list-download-modal",template:e("D+WP")}),a.f("design:paramtypes",[i.a,_,h])],t)}(),S=e("wd/R"),w=function(){function t(t,n,e,a,o,i){this.storeService=t,this._occHabDataService=n,this.mapListService=e,this._ngbModal=a,this._commonService=o,this._configService=i,this.displayedColumns=[{name:"Date",prop:"date_min",width:"100"},{name:"Habitats",prop:"habitats",width:"300"},{name:"Jeu de donn\xe9es",prop:"dataset_name",width:"200"}],this.dataLoading=!0}return t.prototype.ngOnInit=function(){var t=this;this.storeService.firstMessageMapList&&(this._commonService.regularToaster("info","Les 50 derni\xe8res stations saisies"),this.storeService.firstMessageMapList=!1),this.getStations({limit:50});var n=document.documentElement.clientHeight;this.rowNumber=this.calculeteRowNumber(n),this.mapListService.currentIndexRow$.subscribe(function(n){var e=Math.trunc(n/t.rowNumber);t.dataTable.offset=e})},t.prototype.calculeteRowNumber=function(t){return t>1e3?Math.trunc(t/52):t>800?Math.trunc(t/55):t<=800?Math.trunc(t/62):void 0},t.prototype.onResize=function(t){this.rowNumber=this.calculeteRowNumber(t.target.innerHeight)},t.prototype.getStations=function(t){var n=this;this.dataLoading=!0,this._occHabDataService.getStations(t).subscribe(function(t){t.features.length===n._configService.getSettings("OCCHAB.NB_MAX_MAP_LIST")&&n.openModal(!0),n.storeService.idsStation=t.features.map(function(t){return t.id}),n.mapListService.tableData=[],t.features.forEach(function(t){n.displayLeafletPopupCallback(t),n.mapListService.tableData.push(t.properties)}),n.mapListService.geojsonData=t,n.dataLoading=!1},function(t){500==t.status&&n._commonService.translateToaster("error","ErrorMessage"),n.dataLoading=!1})},t.prototype.searchData=function(t){this.getStations(t)},t.prototype.openModal=function(t){void 0===t&&(t=!1),this._ngbModal.open(C,{size:"lg"}).componentInstance.tooManyObs=t},t.prototype.toggleExpandRow=function(t){this.dataTable.rowDetail.toggleExpandRow(t)},t.prototype.displayHabTooltip=function(t){var n=[];if(void 0===t.t_habitats)n.push("Aucun habitat");else for(var e=0;e<t.t_habitats.length;e++){var a=t.t_habitats[e];n.push(a.nom_cite)}return n.sort()},t.prototype.displayObservateursTooltip=function(t){var n=[];if(void 0===t.observers)null!==t.observers_txt&&""!==t.observers_txt.trim()?n.push(t.observers_txt.trim()):n.push("Aucun observateurs");else for(var e=0;e<t.observers.length;e++){var a=t.observers[e];n.push([a.prenom_role,a.nom_role].join(" "))}return n.sort()},t.prototype.displayDateTooltip=function(t){return t.date_min==t.date_max?S(t.date_min).format("DD-MM-YYYY"):"Du "+S(t.date_min).format("DD-MM-YYYY")+" au "+S(t.date_max).format("DD-MM-YYYY")},t.prototype.displayLeafletPopupCallback=function(t){var n=document.createElement("div");n.style.maxHeight="80vh",n.style.overflowY="auto";var e=document.createElement("div");e.innerHTML="<b> Observateurs : </b> <br>",e.innerHTML=e.innerHTML+this.displayObservateursTooltip(t.properties).join(", ");var a=document.createElement("div");a.innerHTML="<b> Date : </b> <br>",a.innerHTML=a.innerHTML+this.displayDateTooltip(t.properties);var o=document.createElement("div");o.innerHTML="<b> Habitats : </b> <br>",o.style.marginTop="5px";var i=this.displayHabTooltip(t.properties).join("<br>");return o.innerHTML=o.innerHTML+i,n.appendChild(e),n.appendChild(a),n.appendChild(o),t.properties.leaflet_popup=n,t},t.prototype.openDeleteModal=function(t,n){this.deleteOne=t,this._ngbModal.open(n)},a.c([Object(o.ViewChild)("dataTable"),a.f("design:type",F.DatatableComponent)],t.prototype,"dataTable",void 0),a.c([Object(o.HostListener)("window:resize",["$event"]),a.f("design:type",Function),a.f("design:paramtypes",[Object]),a.f("design:returntype",void 0)],t.prototype,"onResize",null),t=a.c([Object(o.Component)({selector:"pnx-occhab-map-list",template:e("H3Vj"),providers:[i.a],styles:[e("T09V"),e("nxyw")]}),a.f("design:paramtypes",[h,_,H.a,i.c,f.a,s.c])],t)}(),O=function(){function t(t,n){this._fb=t,this._occHabDataService=n,this.searchForm=this._fb.group({id_dataset:null,date_low:null,date_up:null,habitat:null})}return t=a.c([Object(o.Injectable)(),a.f("design:paramtypes",[m.FormBuilder,_])],t)}(),T=function(){function t(t,n,e){this.mapListFormService=t,this._dateParser=n,this._configService=e,this.onSearch=new o.EventEmitter}return t.prototype.ngOnInit=function(){this.URL_AUTOCOMPLETE=this._configService.getSettings("API_ENDPOINT")+"/habref/habitats/autocomplete/list/"+this._configService.getSettings("OCCHAB.ID_LIST_HABITAT")},t.prototype.formatter=function(t){return t.search_name},t.prototype.searchEvent=function(t){this.onSearch.emit(this.cleanFilter())},t.prototype.resetFilterForm=function(){this.mapListFormService.searchForm.reset()},t.prototype.cleanFilter=function(){var t=this,n={};return Object.keys(this.mapListFormService.searchForm.value).forEach(function(e){(t.mapListFormService.searchForm.value[e]||Array.isArray(t.mapListFormService.searchForm.value[e])&&t.mapListFormService.searchForm.value[e]>0)&&("habitat"==e?n.cd_hab=t.mapListFormService.searchForm.value[e].cd_hab:"date_low"===e||"date_up"===e?(console.log(t.mapListFormService.searchForm.value[e]),n[e]=t._dateParser.format(t.mapListFormService.searchForm.value[e])):n[e]=t.mapListFormService.searchForm.value[e])}),n},a.c([Object(o.Output)(),a.f("design:type",Object)],t.prototype,"onSearch",void 0),t=a.c([Object(o.Component)({selector:"pnx-occhab-map-list-filter",template:e("uoyp"),styles:[e("0yqa")]}),a.f("design:paramtypes",[O,i.b,s.c])],t)}(),E=function(){function t(t,n,e,a,o,i){this._occHabDataService=t,this._route=n,this._dataService=e,this.modal=a,this._ngbModal=o,this._commonService=i}return t.prototype.ngOnInit=function(){},t.prototype.ngAfterViewInit=function(){var t=this;this._sub=this._route.params.subscribe(function(n){n.id_station&&t._occHabDataService.getOneStation(n.id_station).subscribe(function(n){t.stationContent=n.properties,t.oneStation=n})})},t.prototype.setCurrentHab=function(t){this.currentHab=this.stationContent.t_one_habitats[t],this.selectedIndex=t},t.prototype.getHabInfo=function(t){var n=this;this._dataService.getHabitatInfo(t).subscribe(function(t){n.habInfo=t},function(){n.habInfo=null,n._commonService.regularToaster("error","Erreur lors de l'interrogation Habref")})},t.prototype.openModalContent=function(t,n){this.modal.open(t),this.modalContent=n},t.prototype.openModal=function(t){this.modal.open(t,{size:"lg"})},t.prototype.openDeleteModal=function(t){this._ngbModal.open(t)},t.prototype.ngOnDestroy=function(){this._sub.unsubscribe()},t=a.c([Object(o.Component)({selector:"pnx-occhab-info",template:e("tNtU"),styles:[e("i09h"),e("nxyw")]}),a.f("design:paramtypes",[_,r.ActivatedRoute,u.a,i.c,i.c,f.a])],t)}(),A=function(){function t(t,n,e){this._commonService=t,this._occHabDataService=n,this._router=e,this.onDelete=new o.EventEmitter}return t.prototype.ngOnInit=function(){},t.prototype.deleteStation=function(){var t=this;this.onDelete.emit(),this._occHabDataService.deleteOneStation(this.idStation).subscribe(function(n){t._commonService.regularToaster("success","Station supprim\xe9e avec succ\xe8s"),t._router.navigate(["occhab"])},function(){t._commonService.regularToaster("error","Erreur lors de la suppression de la station")},function(){t.c()})},a.c([Object(o.Input)(),a.f("design:type",Number)],t.prototype,"idStation",void 0),a.c([Object(o.Input)(),a.f("design:type",Number)],t.prototype,"nbHabitats",void 0),a.c([Object(o.Input)(),a.f("design:type",Object)],t.prototype,"c",void 0),a.c([Object(o.Output)(),a.f("design:type",Object)],t.prototype,"onDelete",void 0),t=a.c([Object(o.Component)({selector:"pnx-occhab-delete",template:e("WEm+")}),a.f("design:paramtypes",[f.a,_,r.Router])],t)}(),I=e("5nLG"),L=function(){function t(t){this._mapService=t,this.getBoundingBox=new o.EventEmitter}return t.prototype.ngOnInit=function(){var t=this,n=this._mapService.addCustomLegend("topright","occHabLayerControl","url(assets/images/location-pointer.png)");this._mapService.map.addControl(new n),document.getElementById("occHabLayerControl").onclick=function(){var n=t._mapService.map.getBounds();t.getBoundingBox.emit({southEast:n.getSouthEast(),southWest:n.getSouthWest(),northEast:n.getNorthEast(),northWest:n.getNorthWest()})}},a.c([Object(o.Output)(),a.f("design:type",Object)],t.prototype,"getBoundingBox",void 0),t=a.c([Object(o.Component)({selector:"pnx-occhab-dataset-map-overlay",template:""}),a.f("design:paramtypes",[I.a])],t)}();e.d(n,"GeonatureModule",function(){return M});var D=[{path:"form",component:x},{path:"form/:id_station",component:x},{path:"",component:w},{path:"info/:id_station",component:E}],M=function(){function t(){}return t=a.c([Object(o.NgModule)({declarations:[x,w,T,E,C,A,L],imports:[l.CommonModule,s.b.forChild(),c.a,r.RouterModule.forChild(D),i.d.forRoot()],entryComponents:[C],providers:[_,h,O],bootstrap:[]})],t)}()},nxyw:function(t,n){t.exports="@media (min-height: 700px) {\n  :host /deep/ #map {\n    height: 90vh !important; } }\n\n@media (min-height: 800px) {\n  :host /deep/ #map {\n    height: 92vh !important; } }\n\n@media (min-height: 900px) {\n  :host /deep/ #map {\n    height: 93vh !important; } }\n"},tNtU:function(t,n){t.exports='<div class="row row-sm">\n  <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n      <pnx-map height="87vh">\n        <pnx-geojson\n          [geojson]="oneStation"\n          [zoomOnFirstTime]="true"\n        >\n        </pnx-geojson>\n      </pnx-map>\n  </div>\n  <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8 padding-sm right-side">\n    <div class="card border-primary bg-light" >\n      <h5 class="card-header bg-primary text-white">\n          Station n\xb0 {{stationContent?.id_station}}\n          <button \n            matTooltip="Editez le relev\xe9 {{oneStation?.id}}" \n            type="button" class="btn btn-success button-rounded float-right btn-action box-shadow "\n            [disabled]="stationContent?.rights.U == false"\n            [routerLink]="[\'/occhab/form\', oneStation?.id]"\n          >\n          <i class="fa fa-pencil-square-o fa-lg" aria-hidden="true">\n          </i>\n        </button>\n        <button \n          matTooltip="Supprimer le relev\xe9 {{oneStation?.id}}" \n          type="button" \n          (click)="openDeleteModal(deleteModal)" \n          class="btn btn-danger button-rounded float-right btn-action box-shadow "\n          [disabled]="stationContent?.rights.D == false"\n        >\n          <i class="fa fa-trash-o  fa-lg" aria-hidden="true">\n          </i>\n        </button>\n\n      </h5>\n      <div class="card-body" id="card-station">\n\n        <div class="content row">\n          <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n            <h5>\n              <b class="text-muted">Jeu de donn\xe9e :</b> \n            </h5>\n            <p> {{stationContent?.dataset.dataset_name}} </p>\n          </div>\n          <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n            <h5>\n                <b class="text-muted">Date :</b> \n              </h5>\n              <p>\n                  {{stationContent?.date_min | date:\'dd/MM/yyyy\'}} - {{stationContent?.date_max | date:\'dd/MM/yyyy\'}}\n              </p>\n          </div>\n          <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n              <h5>\n                  <b class="text-muted">Observateur(s) :</b> \n                </h5>\n                <div *ngIf="stationContent?.observers; else elseBlock">\n                    <p *ngFor="let obs of stationContent.observers; let last=last"> \n                      {{obs.nom_role}} {{obs.prenom_role}} \n                      <span *ngIf="!last">, </span>\n                    </p>\n                </div>\n                <ng-template #elseBlock>\n                    <p>{{stationContent?.observers_txt}} </p>\n                </ng-template>\n            </div>\n\n  \n          </div>\n        <div class="content row">\n            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n                <h5> <b class="text-muted">Altitude (en m) : </b> </h5> \n                <p>{{stationContent?.altitude_min}} -  {{stationContent?.altitude_max}}</p>\n            </div>\n            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n                <h5> <b class="text-muted">Surface (en m\xb2) : </b> </h5> \n                <p> {{stationContent?.area}}  <small>( {{stationContent?.area_surface_calculation?.label_default}} )</small></p> \n            </div>\n            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n                <h5> <b class="text-muted">Type d\'information g\xe9ographique : </b> </h5> \n                <p *ngIf="stationContent?.geographic_object" > {{stationContent?.geographic_object?.label_default}} </p>\n            </div>\n\n        </div>\n        <div class="content row">\n          <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n            <h5> <b class="text-muted">Habitats de la station : </b> </h5> \n            <table class="table table-hover">\n                <tr \n                  class="clickable"\n                  [ngClass]="{\'table-primary\': i == selectedIndex}"\n                  *ngFor="let hab of stationContent?.t_one_habitats; let i=index"\n                  (click)="setCurrentHab(i); getHabInfo(hab.cd_hab)"\n                >\n                  <td> {{hab.nom_cite}}</td>\n                  <td>\n                    <i class="fa fa-eye clickable" aria-hidden="true"></i>\n                  </td>\n                </tr>\n            </table>\n          </div>\n\n          <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 ">\n              <h5> <b class="text-muted">Commentaire : </b> </h5> \n              <p>{{stationContent?.comment}} </p>\n          </div>\n   \n        </div>\n\n\n      </div>\n    </div>\n    <br>\n    \x3c!-- SELECTED HAB --\x3e\n    <div *ngIf="currentHab" class="card border-primary">\n      <h5 class="card-header bg-primary text-white">{{currentHab?.nom_cite}}</h5>\n\n      <div class="card-body">\n        <div class="row">\n            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6 padding-sm">\n                <b class="text-muted">Technique de collecte : </b> {{currentHab?.collection_technique?.label_default}} <br> \n                <b class="text-muted">M\xe9thode de d\xe9termination : </b> {{currentHab?.determination_method?.label_default}} <br> \n                <b class="text-muted">Pourcentage de recouvrement : </b> {{currentHab?.recovery_percentage}} <br> \n                <b class="text-muted">Abondance : </b> {{currentHab?.abundance?.label_default}} <br> \n            </div>\n            <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4 padding-sm">\n                <h5 class="text-muted"> <b>Information sur l\'habitat (Habref) : </b> </h5> \n                <p> \n                  <b class="text-muted">Nom :</b> {{currentHab?.habref.lb_code}} - {{currentHab?.habref.lb_hab_fr}} \n                  <i class="fa fa-info-circle clickable" aria-hidden="true" (click)="openModalContent(modalInfo, habInfo?.lb_description )"></i>\n                \n                </p>\n                <b class="text-muted"> Typologie : </b>  {{habInfo?.typo.lb_nom_typo}}\n                <i class="fa fa-info-circle clickable" aria-hidden="true" (click)="openModalContent(modalInfo, habInfo?.typo.presentation )"></i>\n                <br>\n                <br>\n                <button \n                (click)="openModal(modalCoresp)"\n                type="button" class="btn btn-outline-primary">\n                Correspondances avec d\'autres typologie d\'habitats\n              </button>\n            </div>\n          </div>\n      </div>\n    </div>\n\n  </div>\n\n  <ng-template #modalInfo let-d="dismiss" let-c="close">\n      <div class="modal-header">\n        <h3>Infos</h3>\n        <button type="button" class="close" aria-label="Close" (click)="c()">\n            <span aria-hidden="true">&times;</span>\n          </button> \n      </div>\n      <div class="modal-body">\n        {{modalContent}}\n        <div *ngIf="!modalContent || modalContent.length == 0">\n            Aucune information compl\xe9mentaire\n        </div>\n      </div>\n\n\n  </ng-template>\n\n  <ng-template #modalCoresp let-d="dismiss" let-c="close">\n    <div class="modal-header">\n      <h3> Correspondances </h3>\n        <button type="button" class="close" aria-label="Close" (click)="c()">\n            <span aria-hidden="true">&times;</span>\n          </button> \n    </div>\n    <div class="modal-body">\n      <table class="table">\n        <thead>\n          <th> Habitat </th>\n          <th> Typologie </th>\n          <th> Type de relation </th>\n        </thead>\n        <tbody>\n          <tr *ngFor="let cor of habInfo?.correspondances">\n            <td> {{cor.habref.lb_code}}  {{cor.habref.lb_hab_fr}} </td>\n            <td> {{cor.habref.typo.lb_nom_typo}} </td>\n            <td> {{cor.type_rel.lb_rel}} </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n\n  </ng-template>\n\n  <ng-template #deleteModal let-c="close">\n\n      <pnx-occhab-delete \n        [c]="c"\n        [idStation]="oneStation?.id"\n        [nbHabitats]="stationContent.t_one_habitats.length"\n      >\n      </pnx-occhab-delete>\n    \n    </ng-template>\n\n</div>\n'},"tt/I":function(t,n){t.exports=".card-body {\n  padding: 5px; }\n\n.all-form {\n  height: 85vh;\n  overflow-y: auto; }\n\n.form-group {\n  margin-bottom: 5px !important; }\n\n.depth-button {\n  margin-top: 20px; }\n\n:host ::ng-deep ngb-typeahead-window {\n  height: 300px;\n  overflow-y: auto; }\n\n.card-body.small {\n  padding: 0px !important; }\n\n.table td,\n.table th {\n  padding: 0.1rem; }\n\ntbody {\n  font-size: 11px; }\n\n#validate-btn {\n  position: absolute;\n  right: 50px;\n  bottom: -10px;\n  box-shadow: 3px 5px 10px 2px rgba(0, 0, 0, 0.51), 0 6px 20px 0 rgba(0, 0, 0, 0.19); }\n\n#validateButton {\n  position: fixed;\n  right: 25px;\n  z-index: 1000;\n  bottom: 10px; }\n\n#overlay-hab {\n  opacity: 90%;\n  position: absolute;\n  z-index: 1500;\n  bottom: 0;\n  width: 100%;\n  overflow-y: auto;\n  max-height: 35vh; }\n\n#overlay {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n#overlay {\n  z-index: 1000; }\n\n.disabled-form {\n  background-color: #000000;\n  cursor: not-allowed;\n  opacity: 0.3; }\n\n:host /deep/ ngb-typeahead-window {\n  transform: translate(0px, 30px) !important; }\n\n.inline {\n  display: flex; }\n\n#addon {\n  height: calc(1.5em + 0.4rem);\n  position: relative;\n  top: 23px; }\n\n#station-card {\n  margin-bottom: 5px; }\n\n#header-form-hab {\n  background-color: #007bff; }\n\n#add-hab-btn {\n  background-color: white !important; }\n\npnx-autocomplete {\n  width: 100%; }\n"},uoyp:function(t,n){t.exports='\n<div class="row row-sm form">\n    <div class="col-2">\n        <pnx-datasets \n        label="{{ \'Releve.Dataset\' | translate }}" \n        [displayAll]="true" \n        [displayOnlyActive]="false"\n        [parentFormControl]="mapListFormService.searchForm.get(\'id_dataset\')"\n        moduleCode="OCCHAB">\n      </pnx-datasets>\n    </div>\n    <div class="col-3">\n      <pnx-autocomplete \n        [apiEndPoint]="URL_AUTOCOMPLETE"\n        [searchAsParameter]="false"\n        [parentFormControl]="mapListFormService.searchForm.get(\'habitat\')"\n        queryParamSearch="search_name"\n        [formatter]="formatter"\n        keyValue="search_name"\n        label="Habitat"\n        placeholder="Tapez les 1eres lettres de l\'habitat"\n      >\n      </pnx-autocomplete>\n    </div>\n    <div class="col-2">\n      <pnx-date \n        label="{{ \'Releve.MinDate\' | translate }}" \n        [parentFormControl]="mapListFormService.searchForm.get(\'date_low\')">\n      </pnx-date>\n    </div>\n    \n    <div class="col-2">\n      <pnx-date \n        label="{{ \'Releve.MaxDate\' | translate }}" \n        [parentFormControl]="mapListFormService.searchForm.get(\'date_up\')">\n      </pnx-date>\n    </div>\n\n    <button \n      class="btn btn-primary"\n      (click)="searchEvent()"\n      >\n      Rechercher\n    </button>\n    <button \n      class="btn btn-danger btn-sm"\n      (click)="resetFilterForm()"\n      matTooltip="Raffraichir les filtres"\n      >\n      <i class="fa fa-refresh" aria-hidden="true"></i>\n    </button>\n\n    \x3c!-- {{mapListFormService.searchForm.value |json}} --\x3e\n\n\n\n</div>\n'}}]);