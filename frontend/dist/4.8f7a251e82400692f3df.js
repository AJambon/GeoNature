(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"+ZXW":function(e,n){e.exports=".municipalities {\n  background-color: #eceeef;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem;\n  padding: 5px !important;\n  height: 60px;\n  overflow-y: scroll; }\n\n.time-button {\n  margin-top: 15px; }\n\n#info-geo-button {\n  margin-top: 15px; }\n\n.form-group {\n  margin-bottom: 0px !important; }\n\n#comment {\n  margin-top: 5px; }\n\n.taxon-list {\n  margin-left: 8%; }\n\n.dataset-inactive {\n  padding: 10px 0px; }\n"},"3dH7":function(e,n){e.exports='<div class="row row-0">\n  <div class="col-sm-12 col-md-7 padding-sm map-content">\n    <pnx-map \n      height="92vh" \n      class="map-card">\n      <pnx-marker \n        [coordinates]="fs.markerCoordinates" \n        zoomLevel="{{\'OCCTAX.releve_map_zoom_level\' |config}}"\n        (markerChanged)="sendGeoInfo($event)">\n      </pnx-marker>\n      <pnx-leaflet-draw \n        [geojson]="fs.geojsonCoordinates" \n        [options]="leafletDrawOptions" \n        zoomLevel="{{\'OCCTAX.releve_map_zoom_level\' |config}}"\n        (layerDrawed)="sendGeoInfo($event)">\n      </pnx-leaflet-draw>\n\n      <pnx-leaflet-filelayer\n        *ngIf="\'OCCTAX.ENABLE_UPLOAD_TOOL\' |config"\n        [editMode]="true"\n        (onLoad)="infoMessageFileLayer()"\n        (onGeomChange)="sendGeoInfo($event)"\n        [style]="{\'color\': \'green\'}">\n      </pnx-leaflet-filelayer> \n\n      <pnx-gps \n        *ngIf="\'OCCTAX.ENABLE_GPS_TOOL\' |config" \n        (markerChanged)="sendGeoInfo($event)">\n      </pnx-gps>\n    </pnx-map>\n  </div>\n  <div class="col-sm-12 col-md-5 padding-0 form">\n    <pnx-occtax-form></pnx-occtax-form>\n  </div>\n</div>\n'},"6oWe":function(e,n){e.exports="#advanced-button {\n  margin-top: 20px; }\n\n#row-commentaire {\n  margin-top: 10px; }\n"},"6zrL":function(e,n){e.exports="hr {\n  color: #5E5959; }\n\n.btn {\n  cursor: pointer; }\n\n#add-counting {\n  margin-top: 20px; }\n"},"74uj":function(e,n){e.exports=".form {\n  max-height: 94vh;\n  overflow-y: auto;\n  position: relative; }\n"},"7ftD":function(e,n,t){"use strict";t.r(n);var o=t("mrSG"),r=t("CcnG"),a=t("Ip0R"),i=t("WSZi"),l=t("ZYCi"),s=t("4GxJ"),c=t("hWDh"),d=t("5nLG"),p=t("4NfF"),m=t("gIcY"),u=t("3xIc"),g=t("t/Na"),f=t("jC6o"),v=t("xKeI"),h=t("5weA"),b=function(){function e(e,n,t,o,r,a,i){var l=this;this._fb=e,this._http=n,this._router=t,this._auth=o,this._formService=r,this._commonService=a,this._configService=i,this.indexOccurrence=0,this.taxonsList=[],this.defaultValuesLoaded=!1,this.editionMode$=new u.a(null),this.disabled=!0,this.stayOnFormInterface=new m.FormControl(!1),this.currentCdExistProot=null,this.currentExistProofLabels=null,this.currentTaxon={},this.indexCounting=0,this.nbCounting=[""],this.showOccurrence=!1,this.showCounting=!1,this.isEdintingOccurrence=!1,this.currentHourMax=null,this._router.events.subscribe(function(e){l.isEdintingOccurrence=!1}),this.currentUser=this._auth.getCurrentUser()}return e.prototype.getDefaultValues=function(e,n,t){var o=new g.HttpParams;return e&&(o=o.set("organism",e.toString())),t&&(o=o.append("regne",n)),n&&(o=o.append("group2_inpn",t)),this._http.get(this._configService.getSettings("API_ENDPOINT")+"/"+this._configService.getSettings("OCCTAX.MODULE_URL")+"/defaultNomenclatures",{params:o})},e.prototype.initReleveForm=function(){var e=this._fb.group({geometry:[null,m.Validators.required],properties:this._fb.group({id_releve_occtax:null,id_dataset:[null,m.Validators.required],id_digitiser:null,date_min:[null,m.Validators.required],date_max:[null,m.Validators.required],hour_min:[null,m.Validators.pattern("^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$")],hour_max:[null,m.Validators.pattern("^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$")],altitude_min:null,altitude_max:null,meta_device_entry:"web",comment:null,id_nomenclature_obs_technique:[null,m.Validators.required],observers:[null,this._configService.getSettings("OCCTAX.observers_txt")?null:m.Validators.required],observers_txt:[null,this._configService.getSettings("OCCTAX.observers_txt")?m.Validators.required:null],id_nomenclature_grp_typ:null,t_occurrences_occtax:[new Array]})});return e.setValidators([this._formService.dateValidator(e.controls.properties.get("date_min"),e.controls.properties.get("date_max")),this._formService.hourAndDateValidator(e.controls.properties.get("date_min"),e.controls.properties.get("date_max"),e.controls.properties.get("hour_min"),e.controls.properties.get("hour_max")),this._formService.altitudeValidator(e.controls.properties.get("altitude_min"),e.controls.properties.get("altitude_max"))]),e},e.prototype.initOccurenceForm=function(){var e=this._fb.group({id_releve_occtax:null,id_occurrence_occtax:null,id_nomenclature_obs_meth:[null,m.Validators.required],id_nomenclature_bio_condition:[null,m.Validators.required],id_nomenclature_bio_status:null,id_nomenclature_naturalness:null,id_nomenclature_exist_proof:null,id_nomenclature_observation_status:null,id_nomenclature_diffusion_level:null,id_nomenclature_blurring:null,id_nomenclature_source_status:null,determiner:null,id_nomenclature_determination_method:null,cd_nom:null,nom_cite:null,meta_v_taxref:null,sample_number_proof:null,digital_proof:null,non_digital_proof:null,comment:null,cor_counting_occtax:""});return e.controls.cd_nom.setValidators([this._formService.taxonValidator,m.Validators.required]),e.setValidators([this.proofValidator.bind(this)]),e},e.prototype.getCurrentCD=function(e,n){for(var t=0;t<e.length;){if(e[t].id_nomenclature==n)return e[t].cd_nomenclature;t++}return null},e.prototype.proofValidator=function(e){if(null!==e.controls.id_nomenclature_exist_proof&&null!==this.currentExistProofLabels){var n=this.getCurrentCD(this.currentExistProofLabels,e.controls.id_nomenclature_exist_proof.value);if("1"===n&&(null===e.controls.digital_proof.value||null!==e.controls.digital_proof.value&&0===e.controls.digital_proof.value.length)&&(null===e.controls.non_digital_proof.value||null!==e.controls.non_digital_proof.value&&0===e.controls.non_digital_proof.value.length))return{noExistProofError:!0};if(null!==e.controls.digital_proof.value&&e.controls.digital_proof.value.length>0||null!==e.controls.non_digital_proof.value&&e.controls.non_digital_proof.value.length>0){if("1"!==n)return{existproofError:!0};if(null!==e.controls.digital_proof.value&&e.controls.digital_proof.value.length>0&&this._configService.getSettings("OCCTAX.digital_proof_validator"))return new RegExp("^(http://|https://|ftp://){1}.+$").test(e.controls.digital_proof.value)?null:{invalidDigitalProof:!0}}}},e.prototype.initCounting=function(){var e=this._fb.group({id_counting_occtax:null,id_nomenclature_life_stage:[null,m.Validators.required],id_nomenclature_sex:[null,m.Validators.required],id_nomenclature_obj_count:[null,m.Validators.required],id_nomenclature_type_count:null,id_occurrence_occtax:null,count_min:[1,m.Validators.compose([m.Validators.required,m.Validators.pattern("[0-9]+[0-9]*")])],count_max:[1,m.Validators.compose([m.Validators.required,m.Validators.pattern("[0-9]+[0-9]*")])]});return e.setValidators([this.countingValidator]),e},e.prototype.countingValidator=function(e){var n=e.get("count_min").value,t=e.get("count_max").value;return n&&t&&n>t?{invalidCount:!0}:null},e.prototype.initCountingArray=function(e){var n=this._fb.array([]);if(e)for(var t=0;t<e.length;t++){(o=this.initCounting()).patchValue(e[t]),n.push(o)}else{var o=this.initCounting();n.push(o)}return n},e.prototype.addCounting=function(){this.indexCounting+=1,this.nbCounting.push("");var e=this.initCounting();this.patchDefaultNomenclatureCounting(e,this.defaultValues),this.countingForm.push(e)},e.prototype.removeCounting=function(e){this.countingForm.removeAt(e),this.nbCounting.splice(e,1),this.indexCounting-=1},e.prototype.addOccurrence=function(e,n){this.occurrenceForm.controls.cor_counting_occtax.patchValue(this.countingForm.value),this.occurrenceForm.value.cd_nom=this.occurrenceForm.value.cd_nom.cd_nom,this.releveForm.value.properties.t_occurrences_occtax.length===this.indexOccurrence?(this.taxonsList.push(this.currentTaxon),this.releveForm.value.properties.t_occurrences_occtax.push(this.occurrenceForm.value)):n?(this.releveForm.value.properties.t_occurrences_occtax[this.indexOccurrence]=this.savedOccurrenceData,this.taxonsList.splice(e,0,this.savedCurrentTaxon)):(this.releveForm.value.properties.t_occurrences_occtax[this.indexOccurrence]=this.occurrenceForm.value,this.taxonsList.splice(e,0,this.currentTaxon)),this.indexOccurrence=this.releveForm.value.properties.t_occurrences_occtax.length,this.nbCounting=[""],this.indexCounting=0,this.currentTaxon={},this.occurrenceForm=this.initOccurenceForm(),this.patchDefaultNomenclatureOccurrence(this.defaultValues),this.countingForm=this.initCountingArray(),this.patchDefaultNomenclatureCounting(this.countingForm.controls[0],this.defaultValues),this.showOccurrence=!1,this.isEdintingOccurrence=!1},e.prototype.cancelOccurrence=function(){this.isEdintingOccurrence?this.addOccurrence(this.indexOccurrence,!0):(this.occurrenceForm=this.initOccurenceForm(),this.patchDefaultNomenclatureOccurrence(this.defaultValues)),this.isEdintingOccurrence=!1},e.prototype.editOccurence=function(e){this.isEdintingOccurrence=!0,this.showOccurrence=!0;var n=this.taxonsList.splice(e,1)[0];this.indexOccurrence=e;var t=this.releveForm.value.properties.t_occurrences_occtax[e];this.savedOccurrenceData=Object.assign({},this.releveForm.value.properties.t_occurrences_occtax[e]);var o=t.cor_counting_occtax,r=o.length;this.currentTaxon=n,t.cd_nom=n,this.occurrenceForm.patchValue(t),this.savedCurrentTaxon=n;for(var a=1;a<r;a++)this.nbCounting.push("");this.countingForm=this.initCountingArray(o)},e.prototype.toggleOccurrence=function(){this.showOccurrence=!this.showOccurrence},e.prototype.toggleCounting=function(){this.showCounting=!this.showCounting},e.prototype.removeOneOccurrence=function(e){this.taxonsList.splice(e,1),this.releveForm.value.properties.t_occurrences_occtax.splice(e,1),this.indexOccurrence=this.indexOccurrence-1},e.prototype.patchDefaultNomenclatureReleve=function(e){this.releveForm.controls.properties.patchValue({id_nomenclature_grp_typ:e.TYP_GRP,id_nomenclature_obs_technique:e.TECHNIQUE_OBS})},e.prototype.patchDefaultNomenclatureOccurrence=function(e){this.occurrenceForm.patchValue({id_nomenclature_bio_condition:e.ETA_BIO,id_nomenclature_naturalness:e.NATURALITE,id_nomenclature_obs_meth:e.METH_OBS,id_nomenclature_bio_status:e.STATUT_BIO,id_nomenclature_exist_proof:e.PREUVE_EXIST,id_nomenclature_determination_method:e.METH_DETERMIN,id_nomenclature_observation_status:e.STATUT_OBS,id_nomenclature_diffusion_level:e.NIV_PRECIS,id_nomenclature_blurring:e.DEE_FLOU,id_nomenclature_source_status:e.STATUT_SOURCE})},e.prototype.patchDefaultNomenclatureCounting=function(e,n){e.patchValue({id_nomenclature_life_stage:n.STADE_VIE,id_nomenclature_sex:n.SEXE,id_nomenclature_obj_count:n.OBJ_DENBR,id_nomenclature_type_count:n.TYP_DENBR,id_nomenclature_valid_status:n.STATUT_VALID})},e.prototype.patchAllDefaultNomenclature=function(){var e=this;this.getDefaultValues(this.currentUser.id_organisme).subscribe(function(n){e.defaultValues=n,e.patchDefaultNomenclatureReleve(n),e.patchDefaultNomenclatureOccurrence(n),e.patchDefaultNomenclatureCounting(e.countingForm.controls[0],n)})},e.prototype.onTaxonChanged=function(e){var n=this;this.currentTaxon=e.item,this.occurrenceForm.patchValue({nom_cite:e.item.search_name}),this.getDefaultValues(this.currentUser.id_organisme,e.item.regne,e.item.group2_inpn).subscribe(function(e){n.patchDefaultNomenclatureOccurrence(e),n.countingForm.controls.forEach(function(t){n.patchDefaultNomenclatureCounting(t,e)})})},e.prototype.formatObservers=function(e){var n=[];return e.forEach(function(e){e.nom_complet=e.nom_role+" "+e.prenom_role,n.push(e)}),n},e.prototype.formatDate=function(e){var n=new Date(e);return{year:n.getFullYear(),month:n.getMonth()+1,day:n.getDate()}},e.prototype.onEditReleve=function(e){this._router.navigate(["occtax/form",e])},e.prototype.backToList=function(){this._router.navigate(["occtax"])},e.prototype.formDisabled=function(){this.disabled&&this._commonService.translateToaster("warning","Releve.FillGeometryFirst")},e=o.c([Object(r.Injectable)(),o.f("design:paramtypes",[m.FormBuilder,g.HttpClient,l.Router,f.a,v.a,h.a,c.c])],e)}(),_=function(){function e(e,n){this._api=e,this._configService=n,this.ABSOLUTE_MODULE_URL=this._configService.getSettings("API_ENDPOINT")+"/"+this._configService.getSettings("OCCTAX.MODULE_URL")}return e.prototype.getOneReleve=function(e){return this._api.get(this.ABSOLUTE_MODULE_URL+"/releve/"+e)},e.prototype.deleteReleve=function(e){return this._api.delete(this.ABSOLUTE_MODULE_URL+"/releve/"+e)},e.prototype.postOcctax=function(e){return this._api.post(this.ABSOLUTE_MODULE_URL+"/releve",e)},e.prototype.getOneCounting=function(e){return this._api.get(this.ABSOLUTE_MODULE_URL+"/counting/"+e)},e=o.c([Object(r.Injectable)(),o.f("design:paramtypes",[g.HttpClient,c.c])],e)}(),x=t("zjWw"),y=function(){function e(e,n,t,o,r,a,i,l){this._ms=e,this._route=n,this._router=t,this._commonService=o,this.fs=r,this.occtaxService=a,this._authService=i,this._configService=l,this.firstFileLayerMessage=!0}return e.prototype.ngOnInit=function(){p.a.draw.circle=!1,p.a.draw.rectangle=!1,p.a.draw.marker=!1,p.a.draw.polyline=!0,p.a.edit.remove=!1,this.leafletDrawOptions=p.a,this.fs.releveForm=this.fs.initReleveForm(),this.fs.occurrenceForm=this.fs.initOccurenceForm(),this.fs.countingForm=this.fs.initCountingArray(),this.fs.patchAllDefaultNomenclature()},e.prototype.ngAfterViewInit=function(){var e=this;this._sub=this._route.params.subscribe(function(n){if(e.id=+n.id,isNaN(e.id)){if(e.fs.editionMode$.next(!1),!e._configService.getSettings("OCCTAX.observers_txt")){var t=e._authService.getCurrentUser();e.fs.releveForm.patchValue({properties:{observers:[t],id_digitiser:t.id_role}})}}else e.fs.showOccurrence=!1,e.fs.editionMode$.next(!0),e.fs.editionMode=!0,e.occtaxService.getOneReleve(e.id).subscribe(function(n){e.fs.currentReleve=n,n.releve.properties.observers&&(n.releve.properties.observers=n.releve.properties.observers.map(function(e){return e.nom_complet=e.nom_role+" "+e.prenom_role,e})),n.releve.properties.hour_min="None"===n.releve.properties.hour_min?null:n.releve.properties.hour_min,n.releve.properties.hour_max="None"===n.releve.properties.hour_max?null:n.releve.properties.hour_max,e.fs.currentHourMax=n.releve.properties.hour_max,n.releve.properties.date_min=e.fs.formatDate(n.releve.properties.date_min),n.releve.properties.date_max=e.fs.formatDate(n.releve.properties.date_max),e.fs.releveForm.patchValue({properties:n.releve.properties}),n.releve.properties.t_occurrences_occtax.forEach(function(n){e.fs.taxonsList.push(n.taxref)}),e.fs.indexOccurrence=n.releve.properties.t_occurrences_occtax.length,e.fs.releveForm.patchValue({geometry:n.releve.geometry}),"Point"==n.releve.geometry.type?e.fs.markerCoordinates=n.releve.geometry.coordinates:e.fs.geojsonCoordinates=n.releve.geometry,e.fs.releveForm.patchValue({geometry:n.releve.geometry})},function(n){403===n.status?e._commonService.translateToaster("error","NotAllowed"):404===n.status&&e._commonService.translateToaster("error","Releve.DoesNotExist"),e._router.navigate(["/occtax"])})})},e.prototype.infoMessageFileLayer=function(){this.firstFileLayerMessage&&this._commonService.translateToaster("info","Map.FileLayerInfoMessage"),this.firstFileLayerMessage=!1},e.prototype.sendGeoInfo=function(e){this._ms.setGeojsonCoord(e)},e.prototype.ngOnDestroy=function(){this._sub.unsubscribe()},o.c([Object(r.ViewChild)(x.a),o.f("design:type",x.a)],e.prototype,"markerComponent",void 0),e=o.c([Object(r.Component)({selector:"pnx-occtax-map-form",template:t("3dH7"),providers:[d.a,b],styles:[t("74uj")]}),o.f("design:paramtypes",[d.a,l.ActivatedRoute,l.Router,h.a,b,_,f.a,c.c])],e)}(),C=t("yc7q"),T=t("VnD/"),w=function(){function e(e,n,t,o,r){this._ms=e,this._dfs=n,this.fs=t,this._commonFormService=o,this._configService=r,this.showTime=!1,this.today=null,this.areasIntersected=new Array}return e.prototype.ngOnInit=function(){var e=this;if(this.geojsonSubscription$=this._ms.gettingGeojson$.subscribe(function(n){e.releveForm.patchValue({geometry:n.geometry}),e.geojson=n,e._dfs.getGeoInfo(n).subscribe(function(n){e.releveForm.controls.properties.patchValue({altitude_min:n.altitude.altitude_min,altitude_max:n.altitude.altitude_max})}),e._dfs.getFormatedGeoIntersection(n).subscribe(function(n){e.areasIntersected=n})}),this._configService.getSettings("OCCTAX.DATE_FORM_WITH_TODAY")){var n=new Date;this.today={year:n.getFullYear(),month:n.getMonth()+1,day:n.getDate()}}this.isEditionSub$=this.fs.editionMode$.pipe(Object(T.a)(function(e){return!1===e})).subscribe(function(n){!1===n&&e._commonFormService.autoCompleteDate(e.releveForm.controls.properties)}),this.releveForm.controls.properties.controls.hour_min.valueChanges.pipe(Object(T.a)(function(e){return null!=e})).subscribe(function(n){0==n.length?e.releveForm.controls.properties.controls.hour_min.reset():(e.releveForm.controls.properties.controls.hour_max.invalid||null==e.releveForm.value.properties.hour_max)&&(e.fs.currentHourMax||e.releveForm.controls.properties.controls.hour_max.patchValue(n))}),this.releveForm.controls.properties.controls.hour_max.valueChanges.pipe(Object(T.a)(function(e){return null!=e})).subscribe(function(n){0==n.length&&e.releveForm.controls.properties.controls.hour_max.reset()})},e.prototype.toggleTime=function(){this.showTime=!this.showTime},e.prototype.ngOnDestroy=function(){this.geojsonSubscription$.unsubscribe(),this.isEditionSub$.unsubscribe()},o.c([Object(r.Input)(),o.f("design:type",m.FormGroup)],e.prototype,"releveForm",void 0),e=o.c([Object(r.Component)({selector:"pnx-releve",template:t("AWQP"),encapsulation:r.ViewEncapsulation.None,styles:[t("+ZXW")]}),o.f("design:paramtypes",[d.a,C.a,b,v.a,c.c])],e)}(),O=function(){function e(e,n){this.fs=e,this._commonService=n,this.countingRemoved=new r.EventEmitter,this.countingAdded=new r.EventEmitter}return e.prototype.ngOnInit=function(){var e=this;this.formArray.controls[this.fs.indexCounting].controls.count_min.valueChanges.distinctUntilChanged().subscribe(function(n){(null===e.formArray.controls[e.fs.indexCounting].value.count_max||e.formArray.controls[e.fs.indexCounting].controls.count_max.pristine)&&e.formArray.controls[e.fs.indexCounting].patchValue({count_max:n})})},e.prototype.onAddCounting=function(){this.countingAdded.emit()},e.prototype.onRemoveCounting=function(){this.countingRemoved.emit(this.index)},o.c([Object(r.Input)(),o.f("design:type",Number)],e.prototype,"index",void 0),o.c([Object(r.Input)(),o.f("design:type",Number)],e.prototype,"length",void 0),o.c([Object(r.Input)(),o.f("design:type",m.FormArray)],e.prototype,"formArray",void 0),o.c([Object(r.Output)(),o.f("design:type",Object)],e.prototype,"countingRemoved",void 0),o.c([Object(r.Output)(),o.f("design:type",Object)],e.prototype,"countingAdded",void 0),o.c([Object(r.ViewChild)("typeDenombrement"),o.f("design:type",Object)],e.prototype,"typeDenombrement",void 0),e=o.c([Object(r.Component)({selector:"pnx-counting",template:t("bV6U"),encapsulation:r.ViewEncapsulation.None,styles:[t("6zrL")]}),o.f("design:paramtypes",[b,h.a])],e)}(),F=t("dMVr"),S=function(){function e(e,n){this.fs=e,this._commonService=n}return e.prototype.getLabels=function(e){this.fs.currentExistProofLabels=e},e.prototype.validateDigitalProof=function(e){return new RegExp("^(http://|https://|ftp://){1}.+$").test(e.value)?null:{validateDigitalProof:{valid:!1}}},e.prototype.ngAfterViewInit=function(){document.getElementById("taxonInput").focus()},o.c([Object(r.Input)(),o.f("design:type",m.FormGroup)],e.prototype,"occurrenceForm",void 0),o.c([Object(r.ViewChild)("taxon"),o.f("design:type",Object)],e.prototype,"taxon",void 0),o.c([Object(r.ViewChildren)(F.a),o.f("design:type",r.QueryList)],e.prototype,"nomenclatures",void 0),o.c([Object(r.ViewChild)("existProof"),o.f("design:type",F.a)],e.prototype,"existProof",void 0),e=o.c([Object(r.Component)({selector:"pnx-occurrence",template:t("Xbjb"),encapsulation:r.ViewEncapsulation.None,styles:[t("6oWe")]}),o.f("design:paramtypes",[b,h.a])],e)}(),E=function(){function e(e,n,t,o,r,a){this.fs=e,this._dateParser=n,this._cfs=t,this.router=o,this._commonService=r,this._mapService=a,this.disabledAfterPost=!1}return e.prototype.ngOnInit=function(){var e=this;this.fs.showOccurrence=!1,this.fs.taxonsList=[],this.fs.indexOccurrence=0,this.fs.editionMode=!1,this.fs.releveForm.controls.geometry.valueChanges.subscribe(function(n){e.fs.disabled=!1})},e.prototype.formDisabled=function(){this.fs.disabled&&this._commonService.translateToaster("warning","Releve.FillGeometryFirst")},e.prototype.submitData=function(){var e=this,n=JSON.parse(JSON.stringify(this.fs.releveForm.value)),t=JSON.parse(JSON.stringify(this.fs.releveForm.value));n.properties.date_min=this._dateParser.format(n.properties.date_min),n.properties.date_max=this._dateParser.format(n.properties.date_max),n.properties.hour_min&&0==n.properties.hour_min.length&&(n.properties.hour_min=null),n.properties.hour_max&&0==n.properties.hour_max.length&&(n.properties.hour_max=null),n.properties.t_occurrences_occtax.forEach(function(e,t){delete e.taxref,e.id_releve_occtax=n.properties.id_releve_occtax,delete e.taxref,e.cor_counting_occtax.forEach(function(n){n.id_occurrence_occtax=e.id_occurrence_occtax})}),n.properties.observers&&n.properties.observers.length>0&&(n.properties.observers=n.properties.observers.map(function(e){return e.id_role})),this.disabledAfterPost=!0,this._cfs.postOcctax(n).subscribe(function(){(e.disabledAfterPost=!1,e._commonService.translateToaster("success","Relev\xe9 enregistr\xe9"),e.fs.releveForm.reset(),e.fs.patchDefaultNomenclatureOccurrence(e.fs.defaultValues),e.fs.taxonsList=[],e.fs.indexOccurrence=0,e.fs.disabled=!0,e.fs.showCounting=!1,e.fs.currentHourMax=null,e.fs.stayOnFormInterface.value)?(delete t.geometry,t.properties.t_occurrences_occtax=[],delete t.properties.comment,t.properties.t_occurrences_occtax=[],e.fs.releveForm.patchValue(t),e._mapService.fileLayerFeatureGroup.getLayers().forEach(function(e){"red"==e.getLayers()[0].options.color&&e.setStyle({color:"green",opacity:.2})})):(e._mapService.setEditingMarker(!1),e._mapService.setEditingMarker(!0),e.router.navigate(["/occtax"]))},function(n){403===n.status?e._commonService.translateToaster("error","NotAllowed"):(console.error(n.error.message),e._commonService.translateToaster("error","ErrorMessage"),e.disabledAfterPost=!1)})},e.prototype.ngOnDestroy=function(){this.fs.markerCoordinates=void 0,this.fs.geojsonCoordinates=void 0},e=o.c([Object(r.Component)({selector:"pnx-occtax-form",template:t("KhOh"),providers:[],styles:[t("z/o+")]}),o.f("design:paramtypes",[b,s.b,_,l.Router,h.a,d.a])],e)}(),A=function(){function e(e,n){this._cfs=e,this._commonService=n,this.taxonRemoved=new r.EventEmitter,this.taxonEdited=new r.EventEmitter}return e.prototype.ngOnInit=function(){},e.prototype.deleteTaxon=function(e){this.taxonRemoved.emit(e)},e.prototype.editTaxons=function(e){this._cfs.isEdintingOccurrence?this._commonService.translateToaster("warning","Taxon.CurrentlyEditing"):this.taxonEdited.emit(e)},o.c([Object(r.Input)(),o.f("design:type",Array)],e.prototype,"list",void 0),o.c([Object(r.Output)(),o.f("design:type",Object)],e.prototype,"taxonRemoved",void 0),o.c([Object(r.Output)(),o.f("design:type",Object)],e.prototype,"taxonEdited",void 0),e=o.c([Object(r.Component)({selector:"pnx-taxons-list",template:t("BSLm"),styles:[t("GCDB")]}),o.f("design:paramtypes",[b,h.a])],e)}(),I=t("y9jh"),D=t("wd/R"),R=t("bkLN"),L=t("vRxP"),M=t("UhLI"),N=t("ym3J"),k=function(){function e(e,n,t,o,r,a,i){this.mapListService=e,this._occtaxService=n,this._commonService=t,this.ngbModal=o,this.globalSub=r,this.renderer=a,this._configService=i,this.formsSelected=[],this.advandedFilterOpen=!1}return e.prototype.ngOnInit=function(){var e=this;this.MAX_EXPORT_NUMBER=this._configService.getSettings("OCCTAX.MAX_EXPORT_NUMBER"),this.idName="id_releve_occtax",this.apiEndPoint="occtax/releves",this.moduleSub=this.globalSub.currentModuleSub.filter(function(e){return e}).subscribe(function(n){e.userCruved=n.cruved}),this.mapListService.displayColumns=this._configService.getSettings("OCCTAX.default_maplist_columns"),this.mapListService.availableColumns=this._configService.getSettings("OCCTAX.available_maplist_column"),this.mapListService.idName=this.idName,this.mapListService.refreshUrlQuery(),this.mapListService.getData(this.apiEndPoint,[{param:"limit",value:12}],this.displayLeafletPopupCallback.bind(this))},e.prototype.onChangePage=function(e){this.mapListService.setTablePage(e,this.apiEndPoint)},e.prototype.onDeleteReleve=function(e){var n=this;this._occtaxService.deleteReleve(e).subscribe(function(t){n.mapListService.deleteObsFront(e),n._commonService.translateToaster("success","Releve.DeleteSuccessfully")},function(e){403===e.status?n._commonService.translateToaster("error","NotAllowed"):n._commonService.translateToaster("error","ErrorMessage")})},e.prototype.openDeleteModal=function(e,n,t,o){this.mapListService.urlQuery,this.mapListService.selectedRow=[],this.mapListService.selectedRow.push(o),e.stopPropagation(),t&&t.parentElement&&t.parentElement.parentElement&&t.parentElement.parentElement.blur(),this.ngbModal.open(n)},e.prototype.openModalDownload=function(e,n){this.ngbModal.open(n,{size:"lg"})},e.prototype.toggle=function(e){var n=this.isChecked(e);this.mapListService.displayColumns=n?this.mapListService.displayColumns.filter(function(n){return n.prop!==e.prop}):this.mapListService.displayColumns.concat([e])},e.prototype.openModalCol=function(e,n){this.ngbModal.open(n)},e.prototype.downloadData=function(e){var n=this.mapListService.urlQuery.delete("limit");n=n.delete("offset");var t=this._configService.getSettings("API_ENDPOINT")+"/"+this._configService.getSettings("OCCTAX.MODULE_URL")+"/export?"+n.toString()+"&format="+e;document.location.href=t},e.prototype.isChecked=function(e){for(var n=0;n<this.mapListService.displayColumns.length&&this.mapListService.displayColumns[n].prop!==e.prop;)n+=1;return n!==this.mapListService.displayColumns.length},e.prototype.ngOnDestroy=function(){this.moduleSub.unsubscribe()},e.prototype.toggleExpandRow=function(e){this.table.rowDetail.toggleExpandRow(e)},e.prototype.onColumnSort=function(e){this.mapListService.setHttpParam("orderby",e.column.prop),this.mapListService.setHttpParam("order",e.newValue),this.mapListService.deleteHttpParam("offset"),this.mapListService.refreshData(this.apiEndPoint,"set")},e.prototype.displayDateTooltip=function(e){return e.date_min==e.date_max?D(e.date_min).format("DD-MM-YYYY"):"Du "+D(e.date_min).format("DD-MM-YYYY")+" au "+D(e.date_max).format("DD-MM-YYYY")},e.prototype.displayTaxonsTooltip=function(e){var n=[];if(void 0===e.t_occurrences_occtax)n.push("Aucun taxon");else for(var t=0;t<e.t_occurrences_occtax.length;t++){var o=e.t_occurrences_occtax[t];void 0!==o.taxref?n.push(o.taxref.nom_complet):n.push(o.nom_cite)}return n.sort()},e.prototype.displayObservateursTooltip=function(e){var n=[];if(void 0===e.observers)null!==e.observers_txt&&""!==e.observers_txt.trim()?n.push(e.observers_txt.trim()):n.push("Aucun observateurs");else for(var t=0;t<e.observers.length;t++){var o=e.observers[t];n.push([o.prenom_role,o.nom_role].join(" "))}return n.sort()},e.prototype.displayLeafletPopupCallback=function(e){var n=this.renderer.createElement("div");n.style.maxHeight="80vh",n.style.overflowY="auto";var t=this.renderer.createElement("div");t.innerHTML=this.displayObservateursTooltip(e.properties).join(", ");var o=this.renderer.createElement("div");o.innerHTML=this.displayDateTooltip(e.properties);var r=this.renderer.createElement("div");r.style.marginTop="5px";var a=this.displayTaxonsTooltip(e.properties).join("<br>");return r.innerHTML=a,this.renderer.appendChild(n,t),this.renderer.appendChild(n,o),this.renderer.appendChild(n,r),e.properties.leaflet_popup=n,e},o.c([Object(r.ViewChild)(s.c),o.f("design:type",s.c)],e.prototype,"modalCol",void 0),o.c([Object(r.ViewChild)(M.a),o.f("design:type",M.a)],e.prototype,"taxonomyComponent",void 0),o.c([Object(r.ViewChild)("dynamicForm"),o.f("design:type",N.a)],e.prototype,"dynamicForm",void 0),o.c([Object(r.ViewChild)("table"),o.f("design:type",I.DatatableComponent)],e.prototype,"table",void 0),e=o.c([Object(r.Component)({selector:"pnx-occtax-map-list",template:t("tefe"),styles:[t("jyyI")]}),o.f("design:paramtypes",[R.a,_,h.a,s.c,L.a,r.Renderer2,c.c])],e)}(),P=[{type_widget:"nomenclature",attribut_label:"Technique d'observation",attribut_name:"id_nomenclature_obs_technique",code_nomenclature_type:"TECHNIQUE_OBS",required:!1},{type_widget:"nomenclature",attribut_label:"Type de regroupement",attribut_name:"id_nomenclature_grp_typ",code_nomenclature_type:"TYP_GRP",required:!1},{type_widget:"nomenclature",attribut_label:"Statut d'observation",attribut_name:"id_nomenclature_observation_status",code_nomenclature_type:"STATUT_OBS",required:!1},{type_widget:"nomenclature",attribut_label:"M\xe9thode d'observation",attribut_name:"id_nomenclature_obs_meth",code_nomenclature_type:"METH_OBS",required:!1},{type_widget:"nomenclature",attribut_label:"Etat biologique",attribut_name:"id_nomenclature_bio_condition",code_nomenclature_type:"ETA_BIO",required:!1},{type_widget:"nomenclature",attribut_label:"Statut biologique",attribut_name:"id_nomenclature_bio_status",code_nomenclature_type:"STATUT_BIO",required:!1},{type_widget:"nomenclature",attribut_label:"Naturalit\xe9",attribut_name:"id_nomenclature_naturalness",code_nomenclature_type:8,required:!1},{type_widget:"nomenclature",attribut_label:"M\xe9thode de d\xe9termination",attribut_name:"id_nomenclature_determination_method",code_nomenclature_type:"NATURALITE",required:!1},{type_widget:"nomenclature",attribut_label:"Preuve d'existence",attribut_name:"id_nomenclature_exist_proof",code_nomenclature_type:"PREUVE_EXIST",required:!1},{type_widget:"text",attribut_label:"Preuve num\xe9rique",attribut_name:"digital_proof",required:!1},{type_widget:"text",attribut_label:"Preuve non num\xe9rique",attribut_name:"non_digital_proof",required:!1},{type_widget:"nomenclature",attribut_label:"Niveau de diffusion",attribut_name:"id_nomenclature_diffusion_level",code_nomenclature_type:"NIV_PRECIS",required:!1},{type_widget:"nomenclature",attribut_label:"Statut source",attribut_name:"id_nomenclature_source_status",code_nomenclature_type:"STATUT_SOURCE",required:!1},{type_widget:"nomenclature",attribut_label:"Floutage",attribut_name:"id_nomenclature_blurring",code_nomenclature_type:"DEE_FLOU",required:!1},{type_widget:"nomenclature",attribut_label:"Stade de vie",attribut_name:"id_nomenclature_life_stage",code_nomenclature_type:"STADE_VIE",required:!1},{type_widget:"nomenclature",attribut_label:"Sexe",attribut_name:"id_nomenclature_sex",code_nomenclature_type:"SEXE",required:!1},{type_widget:"nomenclature",attribut_label:"Objet du d\xe9nombrement",attribut_name:"id_nomenclature_obj_count",code_nomenclature_type:"OBJ_DENBR",required:!1},{type_widget:"nomenclature",attribut_label:"Type de d\xe9nombrement",attribut_name:"id_nomenclature_type_count",code_nomenclature_type:"TYP_DENBR",required:!1}],V=function(){function e(e,n,t){this.mapListService=e,this._fb=n,this._dateParser=t,this.formsDefinition=P,this.formsSelected=[],this.displayParams=new g.HttpParams,this.advandedFilterOpen=!1}return e.prototype.ngOnInit=function(){this.dynamicFormGroup=this._fb.group({cd_nom:null,observers:null,dataset:null,observers_txt:null,id_dataset:null,date_up:null,date_low:null,municipality:null})},e.prototype.searchData=function(){this.mapListService.refreshUrlQuery(12);var e=[];for(var n in this.dynamicFormGroup.value){var t=this.dynamicFormGroup.value[n];"cd_nom"===n&&t?(t=this.dynamicFormGroup.value[n].cd_nom,e.push({param:n,value:t})):"date_up"!==n&&"date_low"!==n||!t?"observers"===n&&t?this.dynamicFormGroup.value.observers.forEach(function(n){e.push({param:"observers",value:n})}):t&&""!==t&&e.push({param:n,value:t}):(t=this._dateParser.format(this.dynamicFormGroup.value[n]),e.push({param:n,value:t}))}this.closeAdvancedFilters(),this.mapListService.refreshData(null,"set",e)},e.prototype.toggleAdvancedFilters=function(){this.advandedFilterOpen=!this.advandedFilterOpen},e.prototype.closeAdvancedFilters=function(){this.advandedFilterOpen=!1},e.prototype.refreshFilters=function(){this.taxonomyComponent.refreshAllInput(),this.dynamicFormGroup.reset(),this.mapListService.refreshUrlQuery(12)},o.c([Object(r.ViewChild)(M.a),o.f("design:type",M.a)],e.prototype,"taxonomyComponent",void 0),e=o.c([Object(r.Component)({selector:"pnx-occtax-map-list-filter",template:t("e/Wg"),styles:[t("qKd2")]}),o.f("design:paramtypes",[R.a,m.FormBuilder,s.b])],e)}(),j=function(){function e(e,n,t,o,r,a,i,l){this.fs=e,this._route=n,this._ms=t,this._router=o,this._occtaxService=r,this._modalService=a,this._commonService=i,this._configService=l,this.disabled=!0,this.showSpinner=!0,this.nbCounting=0}return e.prototype.ngOnInit=function(){var e=this;this.releveForm=this.fs.initReleveForm(),this.occurrenceForm=this.fs.initOccurenceForm(),this._sub=this._route.params.subscribe(function(n){var t=e._router.url.split("/");"id_counting"===t[t.length-2]?e._occtaxService.getOneCounting(n.id).subscribe(function(n){e.id=n.id_releve,e.loadReleve(e.id)}):(e.id=+n.id,e.loadReleve(e.id))})},e.prototype.selectOccurrence=function(e,n){this.selectedIndex=n,this.selectedOccurrence=e,this.occurrenceForm.patchValue(e),this.countingFormArray=this.fs.initCountingArray(e.cor_counting_occtax)},e.prototype.loadReleve=function(e){var n=this;isNaN(e)||this._occtaxService.getOneReleve(e).subscribe(function(e){n.currentReleve=e,n.userReleveCruved=e.cruved,e.releve.properties.t_occurrences_occtax.forEach(function(e){n.nbCounting+=e.cor_counting_occtax.length}),n.releveForm.patchValue(e.releve),n.releve=e.releve,n._configService.getSettings("OCCTAX.observers_txt")?n.observers=e.releve.properties.observers_txt:n.observers=e.releve.properties.observers.map(function(e){return e.nom_role+" "+e.prenom_role}).join(", "),n.dateMin=e.releve.properties.date_min.substring(0,10),n.dateMax=e.releve.properties.date_max.substring(0,10),n._ms.loadGeometryReleve(e.releve,!1)},function(e){403===e.status?n._commonService.translateToaster("error","NotAllowed"):404===e.status&&n._commonService.translateToaster("error","Releve.DoesNotExist"),n._router.navigate(["/occtax"])})},e.prototype.openModalDelete=function(e){this._modalService.open(e)},e.prototype.deleteReleve=function(e){var n=this;this._occtaxService.deleteReleve(this.id).subscribe(function(){n._commonService.translateToaster("success","Releve.DeleteSuccessfully"),n._router.navigate(["/occtax"])},function(e){403===e.status?n._commonService.translateToaster("error","NotAllowed"):n._commonService.translateToaster("error","ErrorMessage")})},e=o.c([Object(r.Component)({selector:"pnx-occtax-map-info",template:t("zALS"),providers:[b],styles:[t("Ub+a")]}),o.f("design:paramtypes",[b,l.ActivatedRoute,d.a,l.Router,_,s.c,h.a,c.c])],e)}(),X=t("lLAP"),U=t("Fzqc"),B=t("n6gG"),q=t("dWZg"),G=t("Wf4p"),z=t("wFw1"),H=t("M2Lx"),$=t("ZYjt"),Y=new r.InjectionToken("mat-slide-toggle-default-options",{providedIn:"root",factory:function(){return{disableToggleValue:!1,disableDragValue:!1}}}),W=0,J={provide:m.NG_VALUE_ACCESSOR,useExisting:Object(r.forwardRef)(function(){return K}),multi:!0},Q=function(){return function(e,n){this.source=e,this.checked=n}}(),Z=function(){return function(e){this._elementRef=e}}(),K=function(e){function n(n,t,o,a,i,l,s,c,d){var p=e.call(this,n)||this;return p._focusMonitor=o,p._changeDetectorRef=a,p._ngZone=l,p.defaults=s,p._animationMode=c,p._dir=d,p.onChange=function(e){},p.onTouched=function(){},p._uniqueId="mat-slide-toggle-"+ ++W,p._required=!1,p._checked=!1,p._dragging=!1,p.name=null,p.id=p._uniqueId,p.labelPosition="after",p.ariaLabel=null,p.ariaLabelledby=null,p.change=new r.EventEmitter,p.toggleChange=new r.EventEmitter,p.dragChange=new r.EventEmitter,p.tabIndex=parseInt(i)||0,p}return Object(o.d)(n,e),Object.defineProperty(n.prototype,"required",{get:function(){return this._required},set:function(e){this._required=Object(B.b)(e)},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"checked",{get:function(){return this._checked},set:function(e){this._checked=Object(B.b)(e),this._changeDetectorRef.markForCheck()},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inputId",{get:function(){return(this.id||this._uniqueId)+"-input"},enumerable:!0,configurable:!0}),n.prototype.ngAfterContentInit=function(){var e=this;this._focusMonitor.monitor(this._elementRef,!0).subscribe(function(n){n||Promise.resolve().then(function(){return e.onTouched()})})},n.prototype.ngOnDestroy=function(){this._focusMonitor.stopMonitoring(this._elementRef)},n.prototype._onChangeEvent=function(e){e.stopPropagation(),this._dragging||this.toggleChange.emit(),this._dragging||this.defaults.disableToggleValue?this._inputElement.nativeElement.checked=this.checked:(this.checked=this._inputElement.nativeElement.checked,this._emitChangeEvent())},n.prototype._onInputClick=function(e){e.stopPropagation()},n.prototype.writeValue=function(e){this.checked=!!e},n.prototype.registerOnChange=function(e){this.onChange=e},n.prototype.registerOnTouched=function(e){this.onTouched=e},n.prototype.setDisabledState=function(e){this.disabled=e,this._changeDetectorRef.markForCheck()},n.prototype.focus=function(){this._focusMonitor.focusVia(this._inputElement,"keyboard")},n.prototype.toggle=function(){this.checked=!this.checked,this.onChange(this.checked)},n.prototype._emitChangeEvent=function(){this.onChange(this.checked),this.change.emit(new Q(this,this.checked))},n.prototype._getDragPercentage=function(e){var n=e/this._thumbBarWidth*100;return this._previousChecked&&(n+=100),Math.max(0,Math.min(n,100))},n.prototype._onDragStart=function(){if(!this.disabled&&!this._dragging){var e=this._thumbEl.nativeElement;this._thumbBarWidth=this._thumbBarEl.nativeElement.clientWidth-e.clientWidth,e.classList.add("mat-dragging"),this._previousChecked=this.checked,this._dragging=!0}},n.prototype._onDrag=function(e){if(this._dragging){var n=this._dir&&"rtl"===this._dir.value?-1:1;this._dragPercentage=this._getDragPercentage(e.deltaX*n);var t=this._dragPercentage/100*this._thumbBarWidth*n;this._thumbEl.nativeElement.style.transform="translate3d("+t+"px, 0, 0)"}},n.prototype._onDragEnd=function(){var e=this;if(this._dragging){var n=this._dragPercentage>50;n!==this.checked&&(this.dragChange.emit(),this.defaults.disableDragValue||(this.checked=n,this._emitChangeEvent())),this._ngZone.runOutsideAngular(function(){return setTimeout(function(){e._dragging&&(e._dragging=!1,e._thumbEl.nativeElement.classList.remove("mat-dragging"),e._thumbEl.nativeElement.style.transform="")})})}},n.prototype._onLabelTextChange=function(){this._changeDetectorRef.detectChanges()},n.decorators=[{type:r.Component,args:[{selector:"mat-slide-toggle",exportAs:"matSlideToggle",host:{class:"mat-slide-toggle","[id]":"id","[attr.tabindex]":"disabled ? null : -1","[class.mat-checked]":"checked","[class.mat-disabled]":"disabled","[class.mat-slide-toggle-label-before]":'labelPosition == "before"',"[class._mat-animation-noopable]":'_animationMode === "NoopAnimations"',"(focus)":"_inputElement.nativeElement.focus()"},template:'<label [attr.for]="inputId" class="mat-slide-toggle-label" #label><div #toggleBar class="mat-slide-toggle-bar" [class.mat-slide-toggle-bar-no-side-margin]="!labelContent.textContent || !labelContent.textContent.trim()"><input #input class="mat-slide-toggle-input cdk-visually-hidden" type="checkbox" role="switch" [id]="inputId" [required]="required" [tabIndex]="tabIndex" [checked]="checked" [disabled]="disabled" [attr.name]="name" [attr.aria-checked]="checked.toString()" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledby" (change)="_onChangeEvent($event)" (click)="_onInputClick($event)"><div class="mat-slide-toggle-thumb-container" #thumbContainer (slidestart)="_onDragStart()" (slide)="_onDrag($event)" (slideend)="_onDragEnd()"><div class="mat-slide-toggle-thumb"></div><div class="mat-slide-toggle-ripple" mat-ripple [matRippleTrigger]="label" [matRippleDisabled]="disableRipple || disabled" [matRippleCentered]="true" [matRippleRadius]="20" [matRippleAnimation]="{enterDuration: 150}"><div class="mat-ripple-element mat-slide-toggle-persistent-ripple"></div></div></div></div><span class="mat-slide-toggle-content" #labelContent (cdkObserveContent)="_onLabelTextChange()"><span style="display:none">&nbsp;</span><ng-content></ng-content></span></label>',styles:[".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging,.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing;transition-duration:0s}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}"],providers:[J],inputs:["disabled","disableRipple","color","tabIndex"],encapsulation:r.ViewEncapsulation.None,changeDetection:r.ChangeDetectionStrategy.OnPush}]}],n.ctorParameters=function(){return[{type:r.ElementRef},{type:q.a},{type:X.e},{type:r.ChangeDetectorRef},{type:String,decorators:[{type:r.Attribute,args:["tabindex"]}]},{type:r.NgZone},{type:void 0,decorators:[{type:r.Inject,args:[Y]}]},{type:String,decorators:[{type:r.Optional},{type:r.Inject,args:[z.a]}]},{type:U.b,decorators:[{type:r.Optional}]}]},n.propDecorators={_thumbEl:[{type:r.ViewChild,args:["thumbContainer"]}],_thumbBarEl:[{type:r.ViewChild,args:["toggleBar"]}],name:[{type:r.Input}],id:[{type:r.Input}],labelPosition:[{type:r.Input}],ariaLabel:[{type:r.Input,args:["aria-label"]}],ariaLabelledby:[{type:r.Input,args:["aria-labelledby"]}],required:[{type:r.Input}],checked:[{type:r.Input}],change:[{type:r.Output}],toggleChange:[{type:r.Output}],dragChange:[{type:r.Output}],_inputElement:[{type:r.ViewChild,args:["input"]}]},n}(Object(G.w)(Object(G.r)(Object(G.s)(Object(G.t)(Z)),"accent"))),ee=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[G.n,G.f,H.b],exports:[K,G.f],declarations:[K],providers:[{provide:$.HAMMER_GESTURE_CONFIG,useClass:G.b}]}]}],e}();t.d(n,"GeonatureModule",function(){return te});var ne=[{path:"",component:k},{path:"form",component:y},{path:"form/:id",component:y,pathMatch:"full"},{path:"info/:id",component:j,pathMatch:"full"},{path:"info/id_counting/:id",component:j,pathMatch:"full"}],te=function(){function e(){}return e=o.c([Object(r.NgModule)({imports:[l.RouterModule.forChild(ne),i.a,a.CommonModule,ee,s.d,c.b.forChild()],declarations:[y,E,j,w,O,S,A,k,V],providers:[_,R.a],bootstrap:[y]})],e)}()},AWQP:function(e,n){e.exports='<div (click)="fs.formDisabled()">\n  <div class=" row row-0">\n    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6 padding-sm">\n      <div *ngIf="!(\'OCCTAX.observers_txt\' |config); else elseBlock">\n        <pnx-observers \n          [parentFormControl]="releveForm.get(\'properties\').get(\'observers\')" \n          idMenu="{{\'OCCTAX.id_observers_list\' |config}}"\n          [disabled]="fs.disabled" \n          label="{{ \'Releve.Observers\' | translate }}" \n          [disabled]="fs.disabled" \n          [bindAllItem]="true">\n        </pnx-observers>\n      </div>\n      <ng-template #elseBlock>\n        <pnx-observers-text \n          [parentFormControl]="releveForm.get(\'properties\').get(\'observers_txt\')" \n          [disabled]="fs.disabled">\n        </pnx-observers-text>\n      </ng-template>\n    </div>\n\n    <div class="col-xs-5 col-sm-5 col-md-5 col-lg-5 padding-sm taxon-list">\n      <img \n        *ngIf="fs.editionMode && !fs.isEdintingOccurrence && fs.taxonsList.length === 0" \n        src="assets/images/Spinner.gif"\n        alt="Chargement..." \n        height="40" \n        width="40">\n      <div \n        *ngIf="fs.taxonsList.length > 0"\n        id="taxon-list">\n        <b id=taxon-list-title> {{fs.taxonsList.length}} {{\'Releve.SavedTaxon\' | translate}} </b>\n        <pnx-taxons-list \n          [list]="fs.taxonsList" \n          (taxonEdited)="fs.editOccurence($event)" \n          (taxonRemoved)="fs.removeOneOccurrence($event)">\n        </pnx-taxons-list>\n      </div>\n    </div>\n  </div>\n  <div class="row row-0">\n    <div class="col-xs-5 col-sm-5 col-md-5 col-lg-5 padding-sm">\n      <div \n        *ngIf="fs.currentReleve?.releve?.properties?.dataset.active == false; else elseblocDataset"\n        class="dataset-inactive">\n        <small> {{ \'MetaData.Datasets\' | translate }}:  </small>\n        <small>\n          <b> {{fs.currentReleve?.releve?.properties?.dataset?.dataset_name}}</b>\n        </small> \n      </div>\n      <ng-template #elseblocDataset>\n        <pnx-datasets \n          label="{{ \'MetaData.Datasets\' | translate }}" \n          [parentFormControl]="releveForm.controls.properties.controls.id_dataset"\n          [disabled]="fs.disabled"\n          moduleCode="OCCTAX">\n        </pnx-datasets>\n      </ng-template>\n    </div>\n  </div>\n  <div class="form-group row row-0">\n    <div \n      *ngIf="\'OCCTAX.form_fields.date_min\' |config" \n      class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm">\n      <pnx-date \n        label="{{ \'Releve.MinDate\' | translate }}" \n        [defaultToday]="\'OCCTAX.DATE_FORM_WITH_TODAY\' |config" \n        [parentFormControl]="releveForm.get(\'properties\').get(\'date_min\')"\n        [disabled]="fs.disabled">\n      </pnx-date>\n    </div>\n\n    <div class="col-xs-1 col-sm-1 col-md-1 col-lg-1 padding-md">\n      <button \n        *ngIf="!showTime" \n        class="btn btn-sm btn-outline-shadow time-button" \n        data-toggle="collapse" \n        data-target="#collapseTime"\n        [disabled]="fs.disabled" \n        (click)="toggleTime()">\n        <i class="fa fa-plus time-plus" aria-expanded="false"></i>\n      </button>\n      <button \n        *ngIf="showTime" \n        class="btn btn-sm btn-outline-shadow time-button" \n        data-toggle="collapse"\n        data-target="#collapseTime"\n        (click)="toggleTime()">\n        <i class="fa fa-minus" aria-expanded="false"></i>\n      </button>\n      <br>\n    </div>\n    <small \n      *ngIf="releveForm.errors?.invalidDate" \n      class="error" \n      style="color:red">\n      {{ \'Releve.DateMaxError\' | translate }}\n    </small>\n  </div>\n\n\n  <div class="collapse" id="collapseTime">\n    <div class="row row-0">\n      <div \n        *ngIf="\'OCCTAX.form_fields.date_max\' |config" \n        class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm">\n        <pnx-date \n          label="{{ \'Releve.MaxDate\' | translate }} " \n          [parentFormControl]="releveForm.get(\'properties\').get(\'date_max\')"\n          [disabled]="fs.disabled">\n        </pnx-date>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.hour_min\' |config" \n        class="col-xs-2 col-sm-2 col-md-2 col-lg-2 padding-sm">\n        <div class="form-group">\n          <small> {{\'Releve.HourMin\' | translate }} </small>\n          <input \n            [ngClass]="{\'is-invalid\' : releveForm.get(\'properties\').get(\'hour_min\').invalid}" \n            [formControl]="releveForm.get(\'properties\').get(\'hour_min\')"\n            class="form-control form-control-sm" \n            type="text" \n            placeholder="{{\'Releve.HourFormat\' | translate }}"\n            [disableControl]="fs.disabled">\n        </div>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.hour_max\' |config" \n        class="col-xs-2 col-sm-2 col-md-2 col-lg-2 padding-sm">\n        <div class="form-group">\n          <small> {{\'Releve.HourMax\' | translate }} </small>\n          <input \n            [ngClass]="{\'is-invalid\' : releveForm.get(\'properties\').get(\'hour_max\').invalid}" \n            [formControl]="releveForm.get(\'properties\').get(\'hour_max\')"\n            class="form-control form-control-sm" \n            type="text" \n            placeholder="{{\'Releve.HourFormat\' | translate }}"\n            [disableControl]="fs.disabled">\n        </div>\n      </div>\n    </div>\n    <small \n      *ngIf="releveForm.errors?.invalidHour" \n      class="error" \n      style="color:red">\n      {{ \'Releve.HourMaxError\' | translate }}\n    </small>\n  </div>\n\n\n  <div class="form-group">\n    <div class="row row-0">\n      <div \n        *ngIf="\'OCCTAX.form_fields.altitude_min\' |config" \n        class="col-xs-2 col-sm-2 col-md-2 col-lg-2 padding-sm">\n        <small> {{ \'Releve.MinAltitude\' | translate }} </small>\n        <input \n          class="form-control form-control-sm" \n          type="number" \n          [formControl]="releveForm.get(\'properties\').get(\'altitude_min\')"\n          [disableControl]="fs.disabled">\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.altitude_max\' |config" \n        class="col-xs-12 col-sm-2 col-md-2 col-lg-2 padding-sm">\n        <small> {{ \'Releve.MaxAltitude\' | translate }} </small>\n        <input \n          class="form-control form-control-sm" \n          type="number" \n          [formControl]="releveForm.get(\'properties\').get(\'altitude_max\')"\n          [disableControl]="fs.disabled">\n      </div>\n\n      <div class="col-xs-12 col-sm-12 col-md-12 col-lg-2 padding-md">\n        <div class="">\n          \x3c!-- Modal intersections  --\x3e\n          <pnx-areas-intersected-modal \n            [geojson]="geojson"> \n          </pnx-areas-intersected-modal>\n        </div>\n      </div>\n      <small \n        *ngIf="releveForm.errors?.invalidAlt" \n        class="error" \n        style="color:red">\n        {{ \'Releve.AltitudeError\' | translate }}\n      </small>\n    </div>\n  </div>\n\n  <div class="row row-0">\n\n    <div \n      *ngIf="\'OCCTAX.form_fields.obs_technique\' |config" \n      class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm">\n      <pnx-nomenclature \n        label="{{ \'Releve.ObsTechnique\' | translate }}" \n        [parentFormControl]="releveForm.get(\'properties\').get(\'id_nomenclature_obs_technique\')"\n        codeNomenclatureType="TECHNIQUE_OBS" \n        [disabled]="fs.disabled">\n      </pnx-nomenclature>\n    </div>\n\n    <div \n      *ngIf="\'OCCTAX.form_fields.group_type\' |config" \n      class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm">\n      <pnx-nomenclature \n        label="{{ \'Releve.GroupType\' | translate }}" \n        [parentFormControl]="releveForm.get(\'properties\').get(\'id_nomenclature_grp_typ\')"\n        codeNomenclatureType="TYP_GRP" \n        [disabled]="fs.disabled">\n      </pnx-nomenclature>\n    </div>\n\n  </div>\n  <div \n    *ngIf="\'OCCTAX.form_fields.comment_releve\' |config" \n    class="row row-0">\n    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-0">\n      <button \n        id="comment" \n        class="btn btn-sm btn-outline-shadow input-alignment-xs" \n        data-toggle="collapse" \n        data-target="#collapseContexteCommentaire"\n        aria-expanded="false" \n        aria-controls="contexte" \n        [disabled]="fs.disabled">\n        <i class="fa fa-comment-o" aria-hidden="true"></i> \n        {{ \'Releve.Comment\' | translate }}\n      </button>\n    </div>\n  </div>\n  <div class="row row-0 collapse" id="collapseContexteCommentaire">\n    <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10 padding-0">\n      <div class="form-group">\n        <textarea \n          [formControl]="releveForm.get(\'properties\').get(\'comment\')" \n          class="form-control" \n          rows="2" \n          id="commentaire">\n        </textarea>\n      </div>\n    </div>\n  </div>\n</div>\n'},BSLm:function(e,n){e.exports='<table class="table table-dark table-responsive">\n  <tbody>\n    <tr \n      *ngFor="let taxon of list; let i = index" \n      [ngClass]="{\'first\' : i === 0}"\n    >\n      <td> {{i +1 }} </td>\n      <td> {{taxon.nom_valide}} </td>\n      <td>\n        <i \n          class="fa fa-pencil-square-o blue" \n          aria-hidden="true" \n          (click)="editTaxons(i)"\n        ></i>\n      </td>\n      <td>\n        <i \n          class="fa fa-times red" \n          aria-hidden="true" \n          (click)="deleteTaxon(i)"\n        ></i>\n      </td>\n    </tr>\n  </tbody>\n\n</table>\n'},GCDB:function(e,n){e.exports=".btn {\n  margin-left: 10px; }\n\ntd {\n  font-size: 12px; }\n\ntd > i {\n  cursor: pointer; }\n\n.fa.fa-pencil-square-o.blue {\n  color: #0275d8; }\n\n.red {\n  color: #e21a1a; }\n\ntable {\n  width: 90%;\n  position: absolute;\n  display: block;\n  max-height: 190px; }\n\n.table th,\n.table tr.first > td {\n  border-top: none !important; }\n"},KhOh:function(e,n){e.exports='<div \n  *ngIf="fs.disabled" \n  id="overlay" \n  [class.disabled-form]="fs.disabled" \n  (click)="fs.formDisabled()">\n</div>\n\n<div id="form">\n  <div class="card line-height-sm">\n    <h5 \n      class="card-header" \n      [class.disabled]="fs.disabled">\n      <i class="fa fa-pencil" aria-hidden="true"></i>\n      <b>{{ \'Releve.Releve\' | translate }} </b>\n      <span \n        *ngIf="!fs.editionMode" \n        id="toggle-btn" \n        class="float-right" \n        matTooltip=" {{\'Releve.StayOnFormInterface\' | translate}} " \n        matTooltipPosition="left">\n        <i class="fa fa-repeat" aria-hidden="true"></i>\n        <mat-slide-toggle  \n          color="primary" \n          [formControl]="fs.stayOnFormInterface">\n        </mat-slide-toggle>\n      </span>\n    </h5>\n\n    <div class="card-body">\n      <div>\n        <pnx-releve \n          [releveForm]="fs.releveForm">\n        </pnx-releve>\n      </div>\n    </div>\n  </div>\n\n  \x3c!-- Occurrence taxon  --\x3e\n  <div class="card card-occurrence line-height-sm">\n    <h5 class="card-header">\n      <i class="fa fa-paw" aria-hidden="true"></i>\n      Taxon\n      <span>\n        <button \n          *ngIf="fs.showOccurrence" \n          class="btn btn-primary toggle-btn btn-sm" \n          [disabled]="fs.occurrenceForm.invalid || fs.countingForm.invalid"\n          (click)="fs.addOccurrence(fs.indexOccurrence)">\n          <i id="check" class="fa fa-check toggle-btn" aria-hidden="true"></i>\n\n          {{ \'Taxon.ValidateTaxon\' | translate }}\n        </button>\n        <button \n          *ngIf="!fs.showOccurrence" \n          type="button" \n          class="btn btn-sm btn-primary toggle-btn cancel-or-add"\n          [disabled]="fs.disabled" \n          (click)="fs.toggleOccurrence();">\n          <i class="fa fa-plus" aria-hidden="true"></i>\n          {{ \'Releve.AddTaxonOnReleve\' | translate }}\n        </button>\n        <button \n          *ngIf="fs.showOccurrence" \n          type="button" \n          class="btn btn-sm btn-danger toggle-btn cancel-or-add" \n          (click)="fs.toggleOccurrence(); fs.cancelOccurrence()">\n          <i class="fa fa-minus" aria-hidden="true"></i>\n          {{ \'Releve.CancelTaxon\' | translate }}\n        </button>\n      </span>\n\n    </h5>\n    <div \n      *ngIf="fs.showOccurrence"\n      class="card-body">\n      <pnx-occurrence \n        [occurrenceForm]="fs.occurrenceForm">\n      </pnx-occurrence>\n      <div>\n        <div>\n          <button \n            id="counting-button" \n            type="button" \n            (click)="fs.toggleCounting()" \n            class="btn btn-primary btn-sm"\n            data-toggle="collapse" \n            data-target="#collapseCounting" \n            [disabled]="fs.disabled">\n            <b> {{ \'Counting.Counting\' | translate }}s </b>\n            <span *ngIf="!fs.showCounting">\n              <i class="fa fa-chevron-right" aria-hidden="true"></i>\n            </span>\n            <span *ngIf="fs.showCounting">\n              <i class="fa fa-chevron-down" aria-hidden="true"></i>\n            </span>\n          </button>\n          \x3c!-- COUNTING --\x3e\n\n        </div>\n        <div \n          id="collapseCounting"\n          class="collapse">\n          <div *ngFor="let counting of fs.nbCounting; let i = index">\n            <pnx-counting \n              [formArray]="fs.countingForm" \n              [index]="i" \n              [length]="fs.nbCounting.length" \n              (countingRemoved)="fs.removeCounting($event)">\n            </pnx-counting>\n          </div>\n          <button \n            id="addOccurrence" \n            matTooltip="Ajouter un nouveau d\xe9nombrement" \n            type="button" \n            class="btn btn-primary btn-sm float-right" \n            (click)="fs.addCounting()" \n            [disabled]="fs.disabled">\n            Ajouter un nouveau d\xe9nombrement\n            <i class="fa fa-plus-circle" aria-hidden="true"></i>\n          </button>\n        </div>\n      </div>\n      <div class="center">\n        <button \n          class="btn btn-primary btn-sm" \n          id="validate-btn" \n          [disabled]="fs.occurrenceForm.invalid || fs.countingForm.invalid"\n          (click)="fs.addOccurrence(fs.indexOccurrence)">\n          <i id="check" class="fa fa-check" aria-hidden="true"></i>\n          {{ \'Taxon.ValidateTaxon\' | translate }}\n        </button>\n      </div>\n\n    </div>\n  </div>\n\n  \x3c!-- <pre>form value: <br>{{fs.countingForm.value | json}}</pre> --\x3e\n  \x3c!-- <pre>form value: <br>{{fs.occurrenceForm.value | json}}</pre> --\x3e\n  \x3c!-- <pre>form value: <br>{{fs.releveForm.value | json}}</pre> --\x3e\n  \x3c!-- <pre>taxon list: <br>{{fs.taxonsList | json}}</pre> --\x3e\n\n\n\n  <div class=center>\n    <button \n      class="btn btn-danger" \n      routerLink="/occtax"\n      (click)="fs.disabled = true;"> \n      {{ \'Cancel\' | translate }}\n    </button>\n    <button \n      class="btn btn-success" \n      [disabled]="(\n          fs.releveForm.invalid\n          || !fs.taxonsList.length\n          || fs.countingForm.invalid\n          ||\xa0fs.showOccurrence\n          || (fs.showOccurrence && fs.occurrenceForm.invalid )\n          ||\xa0disabledAfterPost\n          )"\n      (click)="submitData()">\n      <i class="fa fa-floppy-o" aria-hidden="true"></i>\n      {{ \'Releve.SaveReleve\' | translate }}\n    </button>\n  </div>\n</div>\n'},"Ub+a":function(e,n){e.exports=".selected-taxon {\n  cursor: pointer;\n  list-style-type: none; }\n\n.card-body.releve label {\n  font-weight: bold; }\n\n.info-occurrence {\n  margin-top: 10px; }\n\n.map-container {\n  margin-top: -5px; }\n\n.form-container {\n  height: 94vh;\n  overflow: auto; }\n\n.button-rounded {\n  border-radius: 30px;\n  box-shadow: 4px 5px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  padding-right: 10px;\n  padding-left: 10px;\n  margin-left: 15px; }\n\n#info-geo {\n  margin-top: 5px; }\n\n#row-commentaire {\n  margin-top: 10px; }\n"},Xbjb:function(e,n){e.exports='<div>\n\n  <div class="form-group row row-0">\n    <div class="col-xs-7 col-sm-7 col-md-7 col-lg-7 padding-sm">\n      <pnx-taxonomy \n        #taxon \n        label="{{ \'Taxon.Taxon\' | translate }}" \n        [parentFormControl]="occurrenceForm.get(\'cd_nom\')"\n        idList="{\'occtaxConfig.id_taxon_list\' | config}" \n        [charNumber]="3" \n        [listLength]="occtaxConfig.taxon_result_number" \n        (onChange)="fs.onTaxonChanged($event);" \n        [displayAdvancedFilters]=true>\n      </pnx-taxonomy>\n    </div>\n  </div>\n  <div class="row row-0">\n    <div \n      *ngIf="occtaxConfig.form_fields.observation_status" \n      class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n      <pnx-nomenclature \n        label="{{ \'Taxon.ObservationStatus\' | translate }}" \n        [parentFormControl]="occurrenceForm.get(\'id_nomenclature_observation_status\')"\n        codeNomenclatureType="STATUT_OBS">\n      </pnx-nomenclature>\n    </div>\n    <div \n      *ngIf="\'OCCTAX.form_fields.obs_method\' |config" \n      class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n      <pnx-nomenclature \n        label="{{ \'Taxon.ObsMethod\' | translate }}" \n        [parentFormControl]="occurrenceForm.get(\'id_nomenclature_obs_meth\')"\n        codeNomenclatureType="METH_OBS" \n        [regne]="fs.currentTaxon.regne" \n        [group2Inpn]="fs.currentTaxon.group2_inpn">\n      </pnx-nomenclature>\n    </div>\n    <div \n      *ngIf="\'OCCTAX.form_fields.bio_condition\' |config" \n      class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n      <pnx-nomenclature \n        label="{{ \'Taxon.BiologicalCondition\' | translate }}" \n        [parentFormControl]="occurrenceForm.get(\'id_nomenclature_bio_condition\')"\n        codeNomenclatureType="ETA_BIO" \n        [regne]="fs.currentTaxon.regne" \n        [group2Inpn]="fs.currentTaxon.group2_inpn">\n      </pnx-nomenclature>\n    </div>\n    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n      <button \n        id="advanced-button" \n        type="button" \n        class="btn btn-outline-shadow btn-sm" \n        data-toggle="collapse"\n        data-target="#collapseAvance">\n        <i class="fa fa-cog" aria-hidden="true"></i>\n        {{ \'Taxon.Advanced\' | translate }}\n      </button>\n    </div>\n\n  </div>\n\n\n  <div class="collapse" id="collapseAvance">\n    <div class="row row-0">\n      <div \n        *ngIf="\'OCCTAX.form_fields.determination_method\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          label="{{ \'Taxon.DeterminationMethod\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_determination_method\')"\n          codeNomenclatureType="METH_DETERMIN" \n          [regne]="fs.currentTaxon.regne" \n          [group2Inpn]="fs.currentTaxon.group2_inpn">\n        </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.bio_status\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          label="{{ \'Taxon.BiologicalStatus\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_bio_status\')"\n          codeNomenclatureType="STATUT_BIO" \n          [regne]="fs.currentTaxon.regne" \n          [group2Inpn]="fs.currentTaxon.group2_inpn">\n        </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.naturalness\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          label="{{ \'Taxon.Naturalness\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_naturalness\')"\n          codeNomenclatureType="NATURALITE" \n          [regne]="fs.currentTaxon.regne" \n          [group2Inpn]="fs.currentTaxon.group2_inpn">\n        </pnx-nomenclature>\n      </div>\n    </div>\n\n    <div class="row row-0">\n      <div \n        *ngIf="\'OCCTAX.form_fields.determiner\' |config" \n        class="col-xs-4 col-sm-4 col-md-4 col-lg-4 padding-sm">\n        <small> {{ \'Taxon.Determiner\' | translate }} </small>\n        <input \n          class="form-control form-control-sm" \n          [formControl]="occurrenceForm.get(\'determiner\')" \n          type="text">\n      </div>\n    </div>\n\n    <div class="row row-0">\n      <div \n        *ngIf="\'OCCTAX.form_fields.exist_proof\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          #existProof\n          label="{{ \'Taxon.ExistProof\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_exist_proof\')"\n          codeNomenclatureType="PREUVE_EXIST" \n          [regne]="fs.currentTaxon.regne" \n          [group2Inpn]="fs.currentTaxon.group2_inpn"\n          (labelsLoaded)="getLabels($event)">\n        </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.digital_proof\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <div class="form-group">\n          <small> {{ \'Taxon.DigitalProof\' | translate }} </small>\n          <input \n            [ngClass]="{\'is-invalid\' : occurrenceForm.get(\'digital_proof\').invalid}" \n            class="form-control form-control-sm"\n            [formControl]="occurrenceForm.get(\'digital_proof\')" \n            type="text">\n        </div>\n        <small \n          *ngIf="(\'OCCTAX?.digital_proof_validator\' |config) && occurrenceForm.errors?.invalidDigitalProof"\n          class="red">\n          {{ \'Taxon.ExistProofValidation\' | translate }}\n        </small>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.non_digital_proof\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <div class="form-group">\n          <small> {{ \'Taxon.NonDigitalProof\' | translate }} </small>\n          <input \n            [ngClass]="{\'is-invalid\' : occurrenceForm.get(\'non_digital_proof\').invalid}" \n            class="form-control form-control-sm"\n            [formControl]="occurrenceForm.get(\'non_digital_proof\')" \n            type="text">\n        </div>\n      </div>\n      <small \n        *ngIf="occurrenceForm.errors?.existproofError" \n        class="error" \n        style="color:red">\n        {{\'Taxon.ExistproofError\' |translate}}      \n      </small>\n      <small \n        *ngIf="occurrenceForm.errors?.noExistProofError" \n        class="error" \n        style="color:red">\n        {{\'Taxon.NoExistProofError\' |translate}}\n      </small>\n\n    </div>\n    <div class="row row-0">\n      <div \n        *ngIf="\'OCCTAX.form_fields.diffusion_level\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          label="{{ \'Taxon.DiffusionLevel\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_diffusion_level\')"\n          codeNomenclatureType="NIV_PRECIS">\n        </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.blurring\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          label="{{ \'Taxon.Blurring\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_blurring\')"\n          codeNomenclatureType="DEE_FLOU">\n        </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.source_status\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n        <pnx-nomenclature \n          label="{{ \'Taxon.StatusSource\' | translate }}" \n          [parentFormControl]="occurrenceForm.get(\'id_nomenclature_source_status\')"\n          codeNomenclatureType="STATUT_SOURCE">\n        </pnx-nomenclature>\n      </div>\n    </div>\n    <div class="row row-0" id="row-commentaire">\n      <div \n        *ngIf="\'OCCTAX.form_fields.comment_occ\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-6 padding-sm">\n        <textarea \n          placeholder="{{ \'Releve.Comment\' | translate }}" \n          class="form-control" \n          [formControl]="occurrenceForm.get(\'comment\')"\n          rows="2" \n          id="commentaire">\n        </textarea>\n      </div>\n    </div>\n  </div>\n</div>\n'},bV6U:function(e,n){e.exports='    <div class="row row-0 row-counting">\n      <div \n        *ngIf="\'OCCTAX.form_fields.life_stage\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-4 col-counting padding-sm"\n      >\n          <pnx-nomenclature\n            label="{{ \'Counting.LifeStage\' | translate }}" \n            codeNomenclatureType="STADE_VIE" \n            [parentFormControl]="formArray.controls[index].controls.id_nomenclature_life_stage"\n            [regne]="fs.currentTaxon.regne"  \n            [group2Inpn]="fs.currentTaxon.group2_inpn"\n          > \n          </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.sex\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-3 col-counting padding-sm"\n      >\n            <pnx-nomenclature\n              label="{{ \'Counting.Sex\' | translate }}"\n              codeNomenclatureType="SEXE" \n              [parentFormControl]="formArray.controls[index].controls.id_nomenclature_sex"\n              [regne]="fs.currentTaxon.regne" \n              [group2Inpn]="fs.currentTaxon.group2_inpn"\n            >\n            </pnx-nomenclature>\n      </div>\n      <div \n        *ngIf="\'OCCTAX.form_fields.obj_count\' |config" \n        class="col-xs-12 col-sm-12 col-md-12 col-lg-5 col-counting padding-sm"\n      >\n            <pnx-nomenclature \n              label="{{ \'Counting.CountingObject\' | translate }}"\n              codeNomenclatureType="OBJ_DENBR" \n              [parentFormControl]="formArray.controls[index].controls.id_nomenclature_obj_count"\n              [regne]="fs.currentTaxon.regne"\n              [group2Inpn]="fs.currentTaxon.group2_inpn"\n            >\n            </pnx-nomenclature>\n      </div>\n\n    </div>\n    <div class="form-group row row-0">\n        <div \n          *ngIf="\'OCCTAX.form_fields.type_count\' |config" \n          class="col-xs-12 col-sm-12 col-md-12 col-lg-5 col-counting padding-sm"\n        >\n            <pnx-nomenclature\n              #typeDenombrement\n              label="{{ \'Counting.CountingType\' | translate }}"\n              codeNomenclatureType="TYP_DENBR"\n              [parentFormControl]="formArray.controls[index].controls.id_nomenclature_type_count"\n              [regne]="fs.currentTaxon.regne"\n              [group2Inpn]="fs.currentTaxon.group2_inpn"\n            >\n            </pnx-nomenclature> \n        </div>\n        <div \n          *ngIf="\'OCCTAX.form_fields.count_min\' |config" \n          class="col-xs-12 col-sm-12 col-md-12 col-lg-3 col-counting padding-sm"\n        >\n          <div class="form-group" >\n            <small> {{ \'Counting.NumberMin\' | translate }} </small>\n            <input \n              class="form-control form-control-sm" \n              type="number" \n              min="0"\n              [ngClass]="{\'is-invalid\' : formArray.controls[index].errors?.invalidCount}" \n              [formControl]="formArray.controls[index].controls.count_min"\n            >\n          </div>\n        </div>\n        <div \n          *ngIf="\'OCCTAX.form_fields.count_max\' |config" \n          class="col-xs-12 col-sm-12 col-md-12 col-lg-3 col-counting padding-sm"\n        >\n          <div class="form-group">\n            <small> {{ \'Counting.NumberMax\' | translate }} </small>\n            <input \n              class="form-control form-control-sm" \n              type="number" \n              min="0"\n              [ngClass]="{\'is-invalid\' : formArray.controls[index].errors?.invalidCount}" \n              [formControl]="formArray.controls[index].controls.count_max"\n            >\n          </div>\n        </div>\n        <div \n          *ngIf="index == length -1 && index != 0"\n          class="col-xs-12 col-sm-12 col-md-12 col-lg-1 col-counting padding-sm" \n        >\n          <button \n            id="add-counting" \n            type="button" \n            class="btn btn-danger btn-sm" \n            (click)="onRemoveCounting(index)"\n          >\n            <i class="fa fa-times" aria-hidden="true"></i>\n          </button>\n        </div>\n        <small \n          *ngIf="formArray.controls[index].errors?.invalidCount"\n          class="error"\n          style="color:red"\n        > \n          {{ \'Counting.CountError\' | translate }}\n        </small>\n    </div>\n    <hr>\n  \n  \n'},"e/Wg":function(e,n){e.exports='<div class="row row-sm">\n  <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2 padding-sm">\n    <pnx-taxonomy \n      label="{{ \'Taxon.Taxon\' | translate }}" \n      [parentFormControl]="dynamicFormGroup.controls.cd_nom"\n      idList=" {{\'OCCTAX.id_taxon_list\' | json}}" \n      [charNumber]="3" \n      [listLength]="20">\n    </pnx-taxonomy>\n  </div>\n  <div \n    class="col-xs-2 col-sm-2 col-md-2 col-lg-2 padding-sm"\n    >    \n    <div *ngIf="\'OCCTAX.observers_txt\' | config; else elseBlock">\n      <pnx-observers-text \n        [parentFormControl]="dynamicFormGroup.controls.observers_txt">\n      </pnx-observers-text>\n    </div>\n    <ng-template #elseBlock>\n      <pnx-observers \n        label="{{ \'Releve.Observers\' | translate }}"\n        [parentFormControl]="dynamicFormGroup.controls.observers" \n        idMenu="{{\'OCCTAX.id_observers_list\' | config}}">\n      </pnx-observers>\n    </ng-template>\n  </div>\n  <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2 padding-sm">\n    <pnx-datasets \n      label="{{ \'Releve.Dataset\' | translate }}" \n      [displayAll]="true" \n      [displayOnlyActive]="false"\n      [parentFormControl]="dynamicFormGroup.controls.id_dataset"\n      moduleCode="OCCTAX">\n    </pnx-datasets>\n  </div>\n  <div class="col-xs-1 col-sm-1 col-md-1 col-lg-1 padding-sm">\n    <pnx-date \n      label="{{ \'Releve.MinDate\' | translate }}" \n      [parentFormControl]="dynamicFormGroup.controls.date_low">\n    </pnx-date>\n  </div>\n\n  <div class="col-xs-1 col-sm-1 col-md-1 col-lg-1 padding-sm">\n    <pnx-date \n      label="{{ \'Releve.MaxDate\' | translate }}" \n      [parentFormControl]="dynamicFormGroup.controls.date_up">\n    </pnx-date>\n  </div>\n\n  <button \n    class="btn btn-outline-shadow actions" \n    matTooltip="{{ \'Form.RefreshFilters\' | translate }}"\n    (click)="refreshFilters()"\n  >\n    <i id="refresh-filter" class="fa fa-trash-o clickable action" aria-hidden="true">\n    </i>\n  </button>\n\n\n  <button \n    class="btn btn-outline-shadow actions" \n    matTooltip="{{ \'Form.AdvancedFilters\' | translate }}"\n    (click)="toggleAdvancedFilters()"\n  >\n    <i class="fa fa-filter" aria-hidden="true"></i>\n  </button>\n\n  <svg *ngIf="dynamicForm?.formsSelected.length > 0" \n    height="40" \n    width="10"\n  >\n    <circle \n      cx="5" \n      cy="30" \n      r="3" \n      stroke="red" \n      stroke-width="0" \n      fill="red"/>\n  </svg>\n  <button id="search-btn" \n    class="btn btn-primary" \n    (click)="searchData()"\n  >\n    {{ \'Search\' | translate }}\n    <i class="fa fa-search" aria-hidden="true"></i>\n  </button>\n</div>\n\n<div id="collapse-settings" [hidden]="!advandedFilterOpen">\n  <pnx-dynamic-form-generator \n    #dynamicForm \n    selectLabel="Autres Crit\xe8res" \n    [myFormGroup]="dynamicFormGroup"\n    [formsDefinition]="formsDefinition">\n  </pnx-dynamic-form-generator>\n</div>'},jyyI:function(e,n){e.exports=".action-btn {\n  font-size: 18px; }\n\n#download-btn {\n  margin-top: 5px;\n  padding: 5px; }\n\n#row-navbar {\n  padding-top: 5px;\n  padding-left: 10px; }\n\n#specific-filter {\n  margin-top: -5px;\n  padding-bottom: 5px; }\n\n.col-list {\n  list-style: none; }\n\n.modal-body {\n  text-align: left !important; }\n\n.tab-container {\n  max-height: 81vh;\n  height: 80vh; }\n\nngx-datatable {\n  max-height: 79vh !important;\n  box-shadow: none !important;\n  overflow-y: scroll; }\n\n:host /deep/ .ngx-datatable.material .datatable-footer .page-count {\n  padding: 5px;\n  line-height: 1.2;\n  height: 40px; }\n\n:host /deep/ .datatable-body-row.active .datatable-row-group {\n  background-color: #75e376 !important; }\n\n.ngx-datatable.material {\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12) !important; }\n\n.export-button {\n  width: 70%;\n  margin: 0 auto; }\n\n.modal-dialog {\n  max-width: none !important;\n  width: 50%; }\n\n#modal-download {\n  max-width: none !important;\n  width: 50%; }\n\n.format-btn {\n  margin-left: 5px; }\n\n:host /deep/ .dynamic-form-wrapper {\n  display: flex; }\n\n:host /deep/ .dynamic-form {\n  display: flex; }\n\n:host /deep/ .full-wrapper {\n  display: flex; }\n\n:host /deep/ .trash-btn {\n  position: relative;\n  top: 28px;\n  left: 5px;\n  margin-right: 5px; }\n\n:host /deep/ .filter-control {\n  width: 40%; }\n\n:host /deep/ .datatable-row-detail {\n  height: auto !important;\n  font-size: 0.8em; }\n"},qKd2:function(e,n){e.exports="#search-btn {\n  height: 35px;\n  font-size: 15px;\n  margin-top: 20px;\n  margin-left: 3px; }\n\n.actions {\n  height: 35px;\n  margin-left: 5px;\n  margin-top: 21px;\n  padding: 8px; }\n\n#refresh-filter {\n  color: red; }\n\n:host /deep/ #button-input {\n  height: 2rem; }\n"},tefe:function(e,n){e.exports='<div class="card" id="specific-filter">\n\n  <div class="row row-sm" id="row-navbar">\n    <div class="ml-auto mr-3 action-btn">\n      <button \n        class="btn btn-outline-primary"\n        data-toggle="collapse"\n        data-target="#collapseAvance"\n      >\n        Filtrer <i class="fa fa-sliders" aria-hidden="true"></i>\n      </button>\n      <ng-container *ngIf="userCruved?.C != \'0\'">\n        <a [routerLink]="[\'form\']" class="btn btn-outline-success"> \n          <i class="fa fa-plus-circle" aria-hidden="true"> </i> {{ \'Releve.AddReleve\' | translate }}\n        </a>\n      </ng-container>\n\n    </div>\n  </div>\n\n  \x3c!-- SPECFIC FILTERS --\x3e\n  <div class="collapse" id="collapseAvance">\n    <pnx-occtax-map-list-filter></pnx-occtax-map-list-filter>\n  </div>\n  \x3c!-- END SPECIFIC FILTERS --\x3e\n\n</div>\n\n\n<div class="row row-sm">\n\n  <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 padding-sm">\n    \x3c!-- MAP --\x3e\n    <pnx-map-list [idName]="idName" height="89vh">\n    </pnx-map-list>\n  </div>\n  <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6 padding-sm tab-container">\n    \x3c!-- LIST --\x3e\n    \x3c!--Table--\x3e\n    <ngx-datatable #table \n      class="material striped margin-top-xs table-size expandable" \n      [columnMode]="\'force\'"\n      [columns]="mapListService.displayColumns" \n      [count]="mapListService.page.totalElements"\n      [draggable]="false" \n      [externalPaging]="true"\n      [externalSorting]="true"\n      [footerHeight]="40" \n      [headerHeight]="35" \n      [limit]="mapListService.page.size" \n      [loadingIndicator]="mapListService.isLoading" \n      messages="{{\'OCCTAX.list_messages\' |config}}" \n      [offset]="mapListService.page.pageNumber" \n      [rowClass]="mapListService.getRowClass"\n      [rowHeight]="40" \n      [rows]="mapListService.tableData" \n      [scrollbarH]="false"\n      [selected]="mapListService.selectedRow"\n      [selectionType]="\'single\'"\n      (page)="onChangePage($event)" \n      (select)="mapListService.onRowSelect($event)"\n      (sort)="onColumnSort($event)"\n    >\n\n      \x3c!-- Row Detail Template --\x3e\n      <ngx-datatable-row-detail \n        #myDetailRow \n        rowHeight="100" \n      >\n        <ng-template ngx-datatable-row-detail-template\n          let-row="row" \n          let-expanded="expanded" \n        >\n          <div><strong>ID relev\xe9 : </strong>{{ row.id_releve_occtax }}</div>\n          <ng-container *ngIf="row.comment !== null && row?.comment.trim() !== \'\'">\n            <div><strong>Commentaire : </strong>{{ row.comment }}</div>\n          </ng-container>\n          <div><strong>Altitude : </strong>{{ row.altitude_min == row.altitude_max ? row.altitude_min : row.altitude_min+\' - \'+row.altitude_max }}</div>\n          <ng-container *ngIf="row.digitiser !== undefined">\n            <div><strong>Saisie par : </strong>{{ row.digitiser.nom_complet }}</div>\n          </ng-container>\n          <div><strong>Observ\xe9 par: </strong></div>\n          <div style="margin-left: 20px;">\n              <div *ngFor="let obs of displayObservateursTooltip(row)">\n                {{ obs }}\n              </div>\n            </div>\n          <div><strong>Taxon(s): </strong></div>\n          <div style="margin-left: 20px;">\n            <div *ngFor="let taxon of displayTaxonsTooltip(row)">\n              {{ taxon }}\n            </div>\n          </div>\n        \n        </ng-template>\n      </ngx-datatable-row-detail>\n\n      <ngx-datatable-column\n        [width]="10"\n        [resizeable]="false"\n        [sortable]="false"\n        [draggable]="false"\n        [canAutoResize]="false"\n      >\n        <ng-template ngx-datatable-header-template>\n          <i id="dropdownMenuButton" \n            class="fa fa-cog clickable" \n            aria-hidden="true" \n            data-toggle="dropdown" \n            aria-haspopup="true" \n            aria-expanded="false"\n            matTooltip="{{\'List.Columns\' | translate}}"\n            (click)="openModalCol($event, modalCol)"> \n          </i>\n        </ng-template>\n        <ng-template ngx-datatable-cell-template\n          let-row="row" \n          let-expanded="expanded"\n        >\n          <a href="javascript:void(0)"\n            matTooltip="Ouvrir/fermer le d\xe9tail"\n            [class.datatable-icon-right]="!expanded"\n            [class.datatable-icon-down]="expanded"\n            (click)="toggleExpandRow(row)">\n          </a>\n        </ng-template>\n      </ngx-datatable-column>\n\n      \x3c!-- ACTION COLUMNS --\x3e\n      <ngx-datatable-column maxWidth="10">\n        <ng-template let-row="row" ngx-datatable-cell-template>\n          <ng-container *ngIf="row.rights.U; else disabledEditBlc">\n            <a class="btn btn-outline-shadow btn-no-padding btn-ghost" \n              [routerLink]="[\'form\', row.id_releve_occtax]" \n            >\n              <i matTooltip="{{\'Releve.Edit\' | translate}} {{ row.id_releve_occtax }}"\n                class="fa fa-pencil-square-o" \n                aria-hidden="true"\n              ></i>\n            </a>\n          </ng-container>\n          <ng-template #disabledEditBlc>\n            <button class="btn btn-outline-shadow btn-no-padding btn-ghost" disabled="true">\n              <i class="fa fa-pencil-square-o disabled" \n                matTooltip="{{\'Releve.Edit\' | translate}} {{ row.id_releve_occtax }}"\n                aria-hidden="true"\n              ></i>\n            </button>\n          </ng-template>\n        </ng-template>\n      </ngx-datatable-column>\n\n      <ngx-datatable-column maxWidth="10">\n        <ng-template let-row="row" ngx-datatable-cell-template>\n          <ng-container *ngIf="row.rights.R; else disabledInfoBlc">\n            <a class="btn btn-outline-shadow btn-no-padding btn-ghost" \n              [routerLink]="[\'info\', row.id_releve_occtax]"   \n            >\n              <i matTooltip="{{\'Releve.Info\' | translate}} {{ row.id_releve_occtax }}"\n                class="fa fa-info-circle" \n                aria-hidden="true"\n              ></i>\n            </a>\n          </ng-container>\n          <ng-template #disabledInfoBlc>\n            <button class="btn btn-outline-shadow btn-no-padding btn-ghost" disabled="true">\n              <i class="fa fa-info-circle disabled" \n                matTooltip="{{ \'Releve.Info\' | translate }} {{ row.id_releve_occtax }}"\n                aria-hidden="true"\n              ></i>\n            </button>\n          </ng-template>\n        </ng-template>\n      </ngx-datatable-column>\n\n      <ngx-datatable-column maxWidth="10">\n        <ng-template let-row="row" ngx-datatable-cell-template>\n          <button class="btn btn-outline-shadow btn-no-padding btn-ghost" [disabled]="!row.rights.D" (click)="openDeleteModal($event, modalConfirm, iElement, row)">\n            <i [ngClass]="{\'disabled\' : !row.rights.D}" #iElement matTooltip="{{ \'Releve.Delete\' | translate }} {{row[mapListService.idName]}}"\n              class="fa fa-trash-o" aria-hidden="true"></i>\n          </button>\n        </ng-template>\n      </ngx-datatable-column>\n\n\n      \x3c!-- DATA COLOMNS --\x3e\n      <ng-container *ngFor="let col of mapListService.displayColumns">\n        <ngx-datatable-column \n          [ngSwitch]="col.prop"\n          [maxWidth]="col.max_width" \n          [prop]="col.prop" \n          [name]="col.name" \n          [sortable]="true"\n        >\n\n          \x3c!-- date --\x3e\n          \x3c!-- Pour afficher la date, si p\xe9riode mise en forme en Du ... au ... --\x3e\n          <ng-template \n            *ngSwitchCase="\'date\'" \n            ngx-datatable-cell-template\n            let-row="row"\n          >\n            <span matTooltip="{{ displayDateTooltip(row) }}">\n              {{ displayDateTooltip(row) }}\n            </span>\n          </ng-template>\n\n          \x3c!-- date_min --\x3e\n          <ng-template \n            *ngSwitchCase="\'date_min\'" \n            ngx-datatable-cell-template\n            let-row="row" \n          >\n            <span matTooltip="{{ row.date_min|date:\'dd-MM-yyyy\' }}">\n              {{ row.date_min|date:\'dd-MM-yyyy\' }}\n            </span>\n          </ng-template>\n\n          \x3c!-- date_max --\x3e\n          <ng-template \n            *ngSwitchCase="\'date_max\'" \n            ngx-datatable-cell-template\n            let-row="row" \n          >\n            <span matTooltip="{{ row.date_max|date:\'dd-MM-yyyy\' }}">\n              {{ row.date_max|date:\'dd-MM-yyyy\' }}\n            </span>\n          </ng-template>\n\n          \x3c!-- nb_taxons --\x3e\n          \x3c!-- Affiche le nombre de taxons du relev\xe9 --\x3e\n          <ng-template \n            *ngSwitchCase="\'nb_taxons\'" \n            ngx-datatable-cell-template\n            let-row="row" \n          >\n            <span \n              [matTooltip]="displayTaxonsTooltip(row).join(\'\\n\')" \n              matTooltipPosition="left"\n            >\n              <span>\n                {{ displayTaxonsTooltip(row).length }}\n              </span>\n            </span> \n          </ng-template>\n          <ng-template \n            *ngSwitchCase="\'taxons\'" \n            ngx-datatable-cell-template\n            let-row="row" \n          >\n            <span \n              [matTooltip]="displayTaxonsTooltip(row).join(\'\\n\')" \n              matTooltipPosition="left"\n            >\n              <span>\n                  <span class=\'badge badge-dark\'> {{row.t_occurrences_occtax?.length}} </span> {{displayTaxonsTooltip(row)}}\n              </span>\n            </span> \n          </ng-template>\n\n          \x3c!-- observateurs --\x3e\n          \x3c!-- Affiche le nombre de taxons du relev\xe9 --\x3e\n          <ng-template \n            *ngSwitchCase="\'observateurs\'" \n            ngx-datatable-cell-template\n            let-row="row"\n          >\n            <span \n              [matTooltip]="displayObservateursTooltip(row).join(\'\\n\')" \n              matTooltipPosition="left"\n            >\n              {{ displayObservateursTooltip(row).join(\', \') }}\n            </span> \n          </ng-template>\n\n          \x3c!-- dataset --\x3e\n          <ng-template \n            *ngSwitchCase="\'dataset\'" \n            ngx-datatable-cell-template\n            let-row="row" \n          >\n            <span [matTooltip]="row?.dataset.dataset_name || \'Aucun JDD\'" matTooltipPosition="left">\n              {{ row?.dataset.dataset_name || \'Aucun JDD\'}}\n            </span> \n          </ng-template>\n\n          \x3c!-- Autres colonnes --\x3e\n          <ng-template *ngSwitchDefault let-row="row" ngx-datatable-cell-template>\n            <span [matTooltip]="row[col.prop]" matTooltipPosition="left">\n              {{row[col.prop]}}\n            </span>\n          </ng-template>\n        </ngx-datatable-column>\n\n      </ng-container>\n\n    </ngx-datatable>\n    <button \n      *ngIf="userCruved?.E != \'0\'"\n      id="download-btn" \n      class="btn btn-primary box-shadow" \n      (click)="openModalDownload($event, modalDownload)"\n    >\n      <i class="fa fa-download" aria-hidden="true">\n      </i>\n      <small> {{ \'DownloadData\' | translate }} </small>\n    </button>\n\n    \x3c!-- MODAL COLUMNS --\x3e\n    <ng-template #modalCol let-c="close" let-d="dismiss">\n      <div class="modal-header">\n        <h4> {{\'List.DisplayColumns\' | translate}} </h4>\n      </div>\n      <div class="modal-body">\n        <li class="col-list" *ngFor="let col of mapListService.availableColumns">\n          <a>\n            <input type=\'checkbox\' [id]="col.name" (click)=\'toggle(col)\' [checked]=\'isChecked(col)\' />\n            <label [attr.for]="col.name">{{col.name | readablePropertie }}</label>\n          </a>\n        </li>\n      </div>\n    </ng-template>\n\n    \x3c!-- MODAL DELETE --\x3e\n    <ng-template #modalConfirm let-c="close" let-d="dismiss">\n      <div class="modal-header">\n        <h5 class="modal-title" id="exampleModalLabel"> {{\'Releve.Delete\' | translate }} {{\n          mapListService.selectedRow[0][mapListService.idName]}} ?</h5>\n      </div>\n      <div class="modal-body">\n        <button type="button" class="btn btn-default" (click)="c()"> {{\'Cancel\' | translate}} </button>\n        <button type="button" class="btn btn-danger" (click)="c(); onDeleteReleve(mapListService.selectedRow[0].id_releve_occtax)">\n          {{\'Delete\' | translate }} </button>\n      </div>\n    </ng-template>\n\n    \x3c!-- MODAL DOWNLOAD --\x3e\n    <ng-template #modalDownload id="modal-download" let-c="close" let-d="dismiss">\n      <div class="modal-header">\n        <h5 class="modal-title" id="exampleModalLabel"> {{\'DownloadData\' | translate }}</h5>\n      </div>\n      <div class="modal-body">\n        <span innerHTML="{{\'OCCTAX.export_message\' |config}}"> </span> <br><br>\n        <div *ngIf="mapListService.page.totalElements > MAX_EXPORT_NUMBER ">\n          {{\'DownloadOverflow\' | translate }}\n          <br><br>\n        </div>\n\n        <div class="export-button">\n          <button *ngFor="let format of \'OCCTAX.export_available_format\' |config" (click)="downloadData(format); c()"\n            [disabled]="mapListService.page.totalElements > MAX_EXPORT_NUMBER" type="button" class="btn btn-success format-btn">\n            Format {{format}}\n          </button>\n        </div>\n\n      </div>\n    </ng-template>\n\n\n\n    \x3c!-- END COL 6 --\x3e\n  </div>\n\n  \x3c!-- END ROW --\x3e\n</div>\n'},"z/o+":function(e,n){e.exports=".form-container {\n  background-color: red;\n  line-height: 1 !important; }\n\n.line-height-sm {\n  line-height: 1.2 !important; }\n\n.card-header {\n  padding: 5px; }\n\n:host /deep/ small {\n  font-size: 12px; }\n\n:host /deep/ input {\n  height: 1.5rem; }\n\n:host /deep/ select {\n  height: 1.5rem !important;\n  font-size: 12px !important; }\n\n:host /deep/ option {\n  font-size: 12px; }\n\n:host /deep/ .fa.fa-calendar {\n  font-size: 10px; }\n\n:host /deep/ .fa.fa-filter {\n  font-size: 10px; }\n\n:host /deep/ .input-group-append {\n  height: 1.5rem !important; }\n\n:host /deep/ .input-group-append button {\n  padding-top: 0px; }\n\n.cf-page-size {\n  max-height: 87vh;\n  min-height: 87vh;\n  overflow-y: auto; }\n\n.cf-card-required {\n  margin: -10px -10px 5px 0px; }\n\n.cf-card-option {\n  margin: 0px -10px 5px 0px; }\n\n.cf-card-table {\n  margin: 40px -10px 5px 0px; }\n\n.input-alignment {\n  margin-right: 20px; }\n\n.input-alignment-md {\n  margin-right: 20px; }\n\n.input-alignment-lg {\n  margin-right: 40px; }\n\n.input-alignment-sm {\n  margin-right: 15px; }\n\n.input-alignment-xs {\n  margin-right: 5px; }\n\n.input-width-sm {\n  width: 120px;\n  font-size: small; }\n\n.input-width-xs {\n  width: 95px;\n  font-size: small; }\n\n.input-width-xxs {\n  width: 65px;\n  font-size: small; }\n\n.input-width-md {\n  width: 160px;\n  font-size: small; }\n\n.input-width-lg {\n  width: 230px;\n  font-size: small; }\n\n.input-width-max {\n  width: 95%;\n  font-size: small; }\n\n.card-action {\n  margin: 0px -10px 5px 0px;\n  text-align: center; }\n\n.padding-md {\n  padding-right: 5px !important;\n  padding-left: 5px !important;\n  padding-bottom: 5px;\n  padding-top: 10px; }\n\n.input-center {\n  text-align: center; }\n\n.font-md {\n  font-size: medium; }\n\n.font-sm {\n  font-size: small; }\n\n.well-margin {\n  margin-bottom: -1px; }\n\n.app-margin-top-xs {\n  margin-top: 5px; }\n\n.card-body {\n  padding: 10px; }\n\n.section {\n  margin-bottom: 10px; }\n\n#addOccurrence {\n  cursor: pointer; }\n\n#validate-btn {\n  margin-top: 20px; }\n\nselect.form-control-sm:not([size]):not([multiple]) {\n  height: 1.5rem; }\n\ninput.form-control-sm:not([size]):not([multiple]) {\n  height: 1.8125rem; }\n\nlabel {\n  font-size: 12px !important; }\n\n.btn ::ng-deep {\n  cursor: pointer; }\n\nbutton[disabled] {\n  cursor: not-allowed; }\n\n.card-occurrence {\n  margin-top: 15px; }\n\n.toggle-btn {\n  float: right;\n  font-size: 12px; }\n\n.cancel-or-add {\n  margin-right: 5px; }\n\n.center {\n  margin: 0px 0px 5px 0px;\n  text-align: center;\n  padding: 8px 0;\n  display: block; }\n\n#counting-button {\n  margin-top: 20px; }\n\n#check {\n  color: #57d857; }\n\n#overlay,\n#form {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0; }\n\n#overlay {\n  z-index: 1000; }\n\n.disabled-form {\n  background-color: #000000;\n  cursor: not-allowed;\n  opacity: 0.3; }\n\n#toggle-btn {\n  margin-right: 10px; }\n"},zALS:function(e,n){e.exports='<div class="row row-sm">\n  <div class="col-sm-12 col-md-5 padding-sm map-container">\n    <pnx-map \n      class="map-card" \n      height="92vh"> \n    </pnx-map>\n  </div>\n  <div class="col-sm-12 col-md-7 padding-sm form-container">\n    <div class="card">\n      <div class="card-header">\n        <h4> Relev\xe9\n\n          <button \n            matTooltip="Editez le relev\xe9 {{id}}" \n            type="button" \n            (click)="fs.onEditReleve(id)" \n            class="btn btn-success button-rounded float-right"\n            [disabled]="userReleveCruved?.U == false">\n            <i class="fa fa-pencil-square-o fa-lg" aria-hidden="true"></i>\n          </button>\n\n          <button \n            matTooltip="Supprimer le relev\xe9 {{id}}" \n            type="button" \n            (click)="openModalDelete(modalDelete)" \n            class="btn btn-danger button-rounded float-right"\n            [disabled]="userReleveCruved?.D == false">\n            <i class="fa fa-trash-o  fa-lg" aria-hidden="true"></i>\n          </button>\n\n        </h4>\n      </div>\n\n      <div class="card-body releve">\n        <p>\n          <b> Relev\xe9 num\xe9ro </b>: {{releve?.id}}\n          <b> Observateur(s) </b>:\n          <span *ngIf="\'OCCTAX.observers_txt\' |config">\n            {{releve?.properties.observers_txt}}\n          </span>\n          <span *ngIf="!\'OCCTAX.observers_txt\' |config">\n            {{observers}}\n          </span>\n        </p>\n        <p>\n          <b> Entre le </b>: {{dateMin}}\n          <b> et le </b>: {{dateMax}} \n        </p>\n        <p>\n          <b> Altitude min </b>: {{releve?.properties.altitude_min }}\n          <b> Altitude max </b>: {{releve?.properties.altitude_max }} \n        </p>\n\n        <div class="row row-sm">\n          <div class="col-xs-5 col-sm-5 col-md-5 col-lg-5 padding-sm">\n              <div \n                *ngIf="currentReleve?.releve?.properties?.dataset.active == false; else elseblocDataset"\n                class="dataset-inactive" \n              >\n                <b> {{ \'MetaData.Datasets\' | translate }}: </b> \n                <small>\n                  {{currentReleve?.releve?.properties?.dataset?.dataset_name}}\n                </small> \n              </div>\n              <ng-template #elseblocDataset>\n                <pnx-datasets \n                  label="{{ \'MetaData.Datasets\' | translate }}" \n                  moduleCode="OCCTAX"\n                  [parentFormControl]="releveForm.controls.properties.controls.id_dataset"\n                  [disabled]="fs.disabled"\n                >\n                </pnx-datasets>\n              </ng-template>\n          </div>\n          <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 padding-sm">\n            <pnx-nomenclature \n              label="{{ \'Releve.ObsTechnique\' | translate }}" \n              [parentFormControl]="releveForm.get(\'properties\').get(\'id_nomenclature_obs_technique\')"\n              codeNomenclatureType="TECHNIQUE_OBS" \n              [disabled]=disabled>\n            </pnx-nomenclature>\n          </div>\n          <div \n            *ngIf="\'OCCTAX.form_fields.group_type\' |config" \n            class="col-xs-3 col-sm-3 col-md-3 col-lg-3 padding-sm">\n            <pnx-nomenclature \n              label="{{ \'Releve.GroupType\' | translate }}" \n              [parentFormControl]="releveForm.get(\'properties\').get(\'id_nomenclature_grp_typ\')"\n              codeNomenclatureType="TYP_GRP" \n              [disabled]="disabled">\n            </pnx-nomenclature>\n          </div>\n        </div>\n\n\n        <p id="info-geo">\n          <pnx-areas-intersected-modal \n            [geojson]="releve">\n          </pnx-areas-intersected-modal>\n        </p>\n\n        <label> {{ \'Taxon.ObservedTaxon\' | translate }} </label>\n        <div class="row row-sm">\n          <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6 padding-sm">\n              <table class="table table-hover ">\n                <tr \n                  *ngFor="let occ of releve?.properties.t_occurrences_occtax; let i = index"\n                  [ngClass]="{\'table-success\': i == selectedIndex}" \n                  (click)="selectOccurrence(occ, i)">\n                  <td class="selected-taxon">{{(occ.taxref?.nom_vern!==null) ? occ.taxref?.nom_vern+\' - \' : \'\'}}{{occ.taxref?.nom_complet}}</td>\n                  <td>\n                    <i class="fa fa-eye clickable" aria-hidden="true"></i>\n                  </td>\n                </tr>\n              </table>\n          </div>\n        </div>\n      </div>\n\n      <div \n        class="card info-occurrence"\n        [hidden]="!selectedOccurrence">\n        <label class="card-header">\n          <b> D\xe9tails&nbsp;:&nbsp;</b> {{selectedOccurrence?.taxon?.nom_valide}} \n        </label>\n        <div class="card-body">\n          <ul class="nav nav-tabs" role="tablist">\n            <li class="nav-item">\n              <a \n                class="nav-link active" \n                data-toggle="tab" \n                href="#occurrence" \n                role="tab">\n                Info observation\n              </a>\n            </li>\n            <li class="nav-item">\n              <a \n                class="nav-link" \n                data-toggle="tab" \n                href="#counting" \n                role="tab">\n                D\xe9nombrement\n              </a>\n            </li>\n          </ul>\n          <div class="tab-content">\n            <div class="tab-pane active" id="occurrence" role="tabpanel">\n              <div class="row row-sm">\n                <div \n                  *ngIf="\'OCCTAX.form_fields.observation_status\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.ObservationStatus\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_observation_status\')"\n                    codeNomenclatureType="STATUT_OBS" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.ObsMethod\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_obs_meth\')"\n                    codeNomenclatureType="METH_OBS" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.BiologicalCondition\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_bio_condition\')"\n                    codeNomenclatureType="ETA_BIO" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n              </div>\n\n\n              <div class="row row-sm">\n                <div \n                  *ngIf="\'OCCTAX.form_fields.determination_method\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.DeterminationMethod\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_determination_method\')"\n                    codeNomenclatureType="METH_DETERMIN" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div \n                  *ngIf="\'OCCTAX.form_fields.bio_status\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.BiologicalStatus\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_bio_status\')"\n                    codeNomenclatureType="STATUT_BIO" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div \n                  *ngIf="\'OCCTAX.form_fields.naturalness\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.Naturalness\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_naturalness\')"\n                    codeNomenclatureType="NATURALITE" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n              </div>\n\n\n              <div class="row row-sm">\n                <div \n                  *ngIf="\'OCCTAX.form_fields.exist_proof\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.ExistProof\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_exist_proof\')"\n                    codeNomenclatureType="PREUVE_EXIST" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div \n                  *ngIf="\'OCCTAX.form_fields.digital_proof\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <small> {{ \'Taxon.DigitalProof\' | translate }} </small>\n                  <div class="input-group">\n                    <input \n                      [disableControl]="disabled" \n                      class="form-control form-control-sm" \n                      [formControl]="occurrenceForm.get(\'digital_proof\')"\n                      type="text">\n                  </div>\n                </div>\n                <div \n                  *ngIf="\'OCCTAX.form_fields.non_digital_proof\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <small> {{ \'Taxon.NonDigitalProof\' | translate }} </small>\n                  <div class="input-group">\n                    <input \n                      [disableControl]="disabled" \n                      class="form-control form-control-sm" \n                      [formControl]="occurrenceForm.get(\'non_digital_proof\')"\n                      type="text">\n                  </div>\n                </div>\n              </div>\n\n              <div class="row row-sm">\n                <div \n                  *ngIf="\'OCCTAX.form_fields.diffusion_level\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.DiffusionLevel\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_diffusion_level\')"\n                    codeNomenclatureType="NIV_PRECIS" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div \n                  *ngIf="\'OCCTAX.form_fields.blurring\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.Blurring\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_blurring\')"\n                    codeNomenclatureType="DEE_FLOU" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n                <div \n                  *ngIf="\'OCCTAX.form_fields.source_status\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm">\n                  <pnx-nomenclature \n                    label="{{ \'Taxon.StatusSource\' | translate }}" \n                    [parentFormControl]="occurrenceForm.get(\'id_nomenclature_source_status\')"\n                    codeNomenclatureType="STATUT_SOURCE" \n                    [disabled]="disabled">\n                  </pnx-nomenclature>\n                </div>\n              </div>\n              <div class="row row-0" id="row-commentaire">\n                <div \n                  *ngIf="\'OCCTAX.form_fields.comment\' |config" \n                  class="col-xs-12 col-sm-12 col-md-12 col-lg-6 padding-sm">\n                  <div class="input-group">\n                    <input \n                      [disableControl]="disabled" \n                      placeholder="{{ \'Taxon.Comment\' | translate }}" \n                      class="form-control"\n                      [formControl]="occurrenceForm.get(\'comment\')" \n                      type="text">\n                  </div>\n                </div>\n              </div>\n\n\n\n\n            </div>\n\n            <div class="tab-pane" id="counting" role="tabpanel">\n              <div *ngFor="let counting of selectedOccurrence?.cor_counting_occtax; let index = index">\n                <div class="row row-sm">\n                  <div \n                    *ngIf="\'OCCTAX.form_fields.life_stage\' |config" \n                    class="col-xs-12 col-sm-12 col-md-12 col-lg-4 padding-sm col-counting">\n                    <pnx-nomenclature \n                      label="{{ \'Counting.LifeStage\' | translate }}" \n                      [parentFormControl]="countingFormArray.controls[index].get(\'id_nomenclature_life_stage\')"\n                      codeNomenclatureType="STADE_VIE" \n                      [disabled]="disabled">\n                    </pnx-nomenclature>\n                  </div>\n                  <div \n                    *ngIf="\'OCCTAX.form_fields.sex\' |config" \n                    class="col-xs-12 col-sm-12 col-md-12 col-lg-3 padding-sm col-counting">\n                    <pnx-nomenclature \n                      label="{{ \'Counting.Sex\' | translate }}" \n                      [parentFormControl]="countingFormArray.controls[index].get(\'id_nomenclature_sex\')"\n                      codeNomenclatureType="SEXE" \n                      [disabled]="disabled">\n                    </pnx-nomenclature>\n                  </div>\n                  <div \n                    *ngIf="\'OCCTAX.form_fields.obj_count\' |config" \n                    class="col-xs-12 col-sm-12 col-md-12 col-lg-5 padding-sm col-counting">\n                    <pnx-nomenclature \n                      label="{{ \'Counting.CountingObject\' | translate }}" \n                      [parentFormControl]="countingFormArray.controls[index].get(\'id_nomenclature_obj_count\')"\n                      codeNomenclatureType="OBJ_DENBR" \n                      [disabled]="disabled">\n                    </pnx-nomenclature>\n                  </div>\n\n                </div>\n                <div class="form-group row row-sm">\n                  <div \n                    *ngIf="\'OCCTAX.form_fields.type_count\' |config" \n                    class="col-xs-12 col-sm-12 col-md-12 col-lg-5 padding-sm col-counting">\n                    <pnx-nomenclature \n                      #typeDenombrement \n                      label="{{ \'Counting.CountingType\' | translate }}"\n                      codeNomenclatureType="TYP_DENBR" \n                      [parentFormControl]="countingFormArray.controls[index].controls.id_nomenclature_type_count"\n                      [disabled]="disabled">\n                    </pnx-nomenclature>\n                  </div>\n                  <div \n                    *ngIf="\'OCCTAX.form_fields.count_min\' |config" \n                    class="col-xs-12 col-sm-12 col-md-12 col-lg-3 padding-sm col-counting">\n                    <div class="form-group">\n                      <small> {{ \'Counting.NumberMin\' | translate }} </small>\n                      <input \n                        type="number" \n                        class="form-control form-control-sm" \n                        [disableControl]="disabled"\n                        [formControl]="countingFormArray.controls[index].controls.count_min">\n                    </div>\n                  </div>\n                  <div \n                    *ngIf="\'OCCTAX.form_fields.count_max\' |config" \n                    class="col-xs-12 col-sm-12 col-md-12 col-lg-3 padding-sm col-counting">\n                    <div class="form-group">\n                      <small> {{ \'Counting.NumberMax\' | translate }} </small>\n                      <input \n                        type="number" \n                        class="form-control form-control-sm" \n                        [formControl]="countingFormArray.controls[index].controls.count_max"\n                        [disableControl]="disabled">\n                    </div>\n                  </div>\n                  <b>{{\'Counting.ValidationStatus\' | translate}}&nbsp;:&nbsp;</b>  {{counting?.validation_status?.mnemonique}}\n\n                </div>\n                <hr>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <ng-template \n      #modalDelete \n      let-d="dismiss" \n      let-c="close">\n\n      <div class="modal-header">\n        <h4 class="modal-title pull-left">Suppression</h4>\n        <button \n          type="button" \n          class="close pull-right" \n          aria-label="Close" \n          (click)="c()">\n          <span aria-hidden="true">&times;</span>\n        </button>\n      </div>\n      <div class="modal-body">\n        <p>\n          Attention vous vous appr\xeatez \xe0 supprimer un releve qui comporte\n          {{releve?.properties.t_occurrences_occtax.length}} occurrence(s) de taxon(s) et {{nbCounting}}\n          d\xe9nombrement(s).\n        </p>\n        <button \n          type="button" \n          class="btn btn-secondary"\n          (click)="c()">\n          Annuler\n        </button>\n\n        <button \n          type="button" \n          class="btn btn-danger"\n          (click)="deleteReleve(modalDelete); c()">\n          Supprimer\n        </button>\n      </div>\n\n    </ng-template>\n'}}]);